From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sun, 8 Jan 2023 23:44:46 +0800
Subject: [PATCH] Optimize trigger advancements


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 3d62b7eaaad2ae0b8b9ecf70b0c9a96e82206585..95dd73a3afae541f151184cb919a5317c7529858 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -667,6 +667,7 @@ public class ServerPlayer extends Player {
 
     @Override
     protected void onInsideBlock(BlockState state) {
+        if (!state.isAir()) // KioCG
         CriteriaTriggers.ENTER_BLOCK.trigger(this, state);
     }
 
@@ -691,7 +692,7 @@ public class ServerPlayer extends Player {
 
         // Paper start - Configurable container update tick rate
         if (--containerUpdateDelay <= 0) {
-            this.containerMenu.broadcastChanges();
+            this.containerMenu.broadcastChanges(20); // KioCG
             containerUpdateDelay = level.paperConfig().tickRates.containerUpdate;
         }
         // Paper end
@@ -714,6 +715,7 @@ public class ServerPlayer extends Player {
             }
         }
 
+        if (this.tickCount % (20 * 60) == 0) // KioCG
         CriteriaTriggers.TICK.trigger(this);
         if (this.levitationStartPos != null) {
             CriteriaTriggers.LEVITATION.trigger(this, this.levitationStartPos, this.tickCount - this.levitationStartTime);
@@ -836,7 +838,7 @@ public class ServerPlayer extends Player {
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
-            if (this.tickCount % 20 == 0) {
+            if (this.tickCount % (20 * 3) == 0) { // KioCG
                 CriteriaTriggers.LOCATION.trigger(this);
             }
 
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 20b328704981c088597359fe18c1d67c339c1c0f..ec2c5a10445eb0e580af2890a0560eae3208dbe4 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -233,6 +233,12 @@ public abstract class AbstractContainerMenu {
     }
 
     public void broadcastChanges() {
+    // KioCG start
+        this.broadcastChanges(-1);
+    }
+
+    public void broadcastChanges(int triggerUpdateDelay) {
+    // KioCG end
         int i;
 
         for (i = 0; i < this.slots.size(); ++i) {
@@ -241,7 +247,7 @@ public abstract class AbstractContainerMenu {
             Objects.requireNonNull(itemstack);
             Supplier<ItemStack> supplier = Suppliers.memoize(itemstack::copy);
 
-            this.triggerSlotListeners(i, itemstack, supplier);
+            this.triggerSlotListeners(i, itemstack, supplier, triggerUpdateDelay); // KioCG
             this.synchronizeSlotToRemote(i, itemstack, supplier);
         }
 
@@ -293,6 +299,16 @@ public abstract class AbstractContainerMenu {
     }
 
     private void triggerSlotListeners(int slot, ItemStack stack, Supplier<ItemStack> copySupplier) {
+    // KioCG start
+        this.triggerSlotListeners(slot, stack, copySupplier, -1);
+    }
+
+    private int triggerUpdate = 0;
+    private void triggerSlotListeners(int slot, ItemStack stack, Supplier<ItemStack> copySupplier, int delay) {
+        // 不再触发用处不大的事件
+        if (delay == -1 || ++triggerUpdate <= delay) return;
+        triggerUpdate = 0;
+    // KioCG end
         ItemStack itemstack1 = (ItemStack) this.lastSlots.get(slot);
 
         if (!ItemStack.matches(itemstack1, stack)) {
