From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sat, 24 Feb 2024 21:08:02 +0800
Subject: [PATCH] Optimize block entity


diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
index fc35cfc9d045f3e5b6a50af1d0ba83b6e322091f..9c681f39695f7a2b6321b848472be9019fd8bac6 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
@@ -89,6 +89,7 @@ public class MinecartHopper extends AbstractMinecartContainer implements Hopper
     }
 
     public boolean suckInItems() {
+        if (HopperBlockEntity.isFullContainer(this, null)) return false; // KioCG
         if (HopperBlockEntity.suckInItems(this.level(), this)) {
             this.immunize();  // Paper
             return true;
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index 5eed401d3d722c6553240aba4a8e2337ee32b263..a61c036d86b80a9a2f0f0b3171e4c87fee72f67f 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -291,7 +291,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
+        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : null); // KioCG - 优化未燃烧的运算
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 5a3a619c4b936a4d186c0593f5af7b2493b85825..753a95fd18def1d9b088e4b0dec2dc71079d7f16 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -86,6 +86,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     public final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
     private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
     public final RecipeType<? extends AbstractCookingRecipe> recipeType; // Paper - cook speed multiplier API
+    private boolean shouldTick = true; // KioCG
 
     protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType) {
         super(blockEntityType, pos, state);
@@ -339,6 +340,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, AbstractFurnaceBlockEntity blockEntity) {
+        if (!blockEntity.isLit() && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         boolean flag = blockEntity.isLit();
         boolean flag1 = false;
 
@@ -368,6 +370,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         if (!blockEntity.isLit() && (!flag3 || !flag2)) {
             if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
                 blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
+                blockEntity.shouldTick = true; // KioCG
             }
         } else {
             RecipeHolder recipeholder;
@@ -422,6 +425,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 }
                 // CraftBukkit end
 
+                blockEntity.shouldTick = true; // KioCG
                 ++blockEntity.cookingProgress;
                 if (blockEntity.cookingProgress >= blockEntity.cookingTotalTime) { // Paper - cook speed multiplier API
                     blockEntity.cookingProgress = 0;
@@ -606,6 +610,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             this.setChanged();
         }
 
+        this.shouldTick = true; // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 9bb542ce3a8c52e1688bb1f66fc916dd23a5fd10..65ddf5c04f7d6212a20d535cc2d1d423f6b27bec 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -59,6 +59,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     private int lastTick = MinecraftServer.currentTick;
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
     private int maxStack = MAX_STACK;
+    private boolean shouldTick = true; // KioCG
 
     public void onOpen(CraftHumanEntity who) {
         this.transaction.add(who);
@@ -149,6 +150,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, BrewingStandBlockEntity blockEntity) {
+        if (blockEntity.brewTime <= 0 && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
 
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
@@ -177,6 +179,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         blockEntity.lastTick = MinecraftServer.currentTick;
 
         if (flag1) {
+            blockEntity.shouldTick = true; // KioCG
             blockEntity.brewTime -= elapsedTicks;
             boolean flag2 = blockEntity.brewTime <= 0; // == -> <=
             // CraftBukkit end
@@ -332,6 +335,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             this.items.set(slot, stack);
         }
 
+        this.shouldTick = true; // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 9f7b49a6a50cb53d914c8f4b5132c035c5ab71da..d33fd3f94d5c4c4dbd8e87dd337b686dac808580 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -127,6 +127,24 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
     }
 
+    // KioCG start
+    public static void cooldownImmediately(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
+        boolean flag = false;
+
+        for (int i = 0; i < campfire.items.size(); ++i) {
+            if (campfire.cookingProgress[i] > 0) {
+                flag = true;
+                campfire.cookingProgress[i] = (int) 0;
+            }
+        }
+
+        if (flag) {
+            setChanged(world, pos, state);
+        }
+
+    }
+    // KioCG end
+
     public static void particleTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
         RandomSource randomsource = world.random;
         int i;
@@ -254,6 +272,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public void dowse() {
         if (this.level != null) {
             this.markUpdated();
+            this.cooldownImmediately(this.getLevel(), this.getBlockPos(), this.getBlockState(), (CampfireBlockEntity) this); // KioCG - 优化未燃烧的运算
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 9e577408d8e794c40bf34bc800cd0920856a5d2b..b1e8512822c2cb757285d7e3cd31f87eb1e6a754 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -517,7 +517,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         return inventory instanceof WorldlyContainer ? IntStream.of(((WorldlyContainer) inventory).getSlotsForFace(side)) : IntStream.range(0, inventory.getContainerSize());
     }
 
-    private static boolean isFullContainer(Container inventory, Direction direction) {
+    public static boolean isFullContainer(Container inventory, Direction direction) { // KioCG - private -> public
         if (true) return inventory.isCompletelyFull(direction); // Pufferfish - use bitsets
         // Paper start - Perf: Optimize Hoppers
         if (inventory instanceof WorldlyContainer worldlyContainer) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 1b49ecbf8fdbe8b734f8ca5191dc9ed70aa66af7..14e58e7ce2120da624459bfe7179fed60593b95d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -586,7 +586,7 @@ public class LevelChunk extends ChunkAccess {
             } else {
                 ServerLevel worldserver = (ServerLevel) world;
 
-                return this.getFullStatus().isOrAfter(FullChunkStatus.BLOCK_TICKING) && worldserver.areEntitiesLoaded(ChunkPos.asLong(pos));
+                return this.getFullStatus().isOrAfter(FullChunkStatus.ENTITY_TICKING) && worldserver.areEntitiesLoaded(ChunkPos.asLong(pos)); // KioCG - use ENTITY_TICKING
             }
         }
     }
