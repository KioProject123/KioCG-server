From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Mon, 27 Nov 2023 05:18:28 +0800
Subject: [PATCH] Hopper filter


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index e7f35737769dc907dbf227fb7c696a5386644c68..71a684323a518b2c4092e731c8b382952e42a8bf 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -572,6 +572,9 @@ public class WorldConfiguration extends ConfigurationPart {
 
             public boolean persistentOnlyWhenPickedUpEnchantedItems = false;
         }
+
+        public boolean hopperPullsLockedContainer = true;
+        public boolean hopperPullsEntityOwnedItem = true;
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
index 9c681f39695f7a2b6321b848472be9019fd8bac6..a3555514e37229e863d20cc4396c2a61c7013691 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartHopper.java
@@ -17,6 +17,7 @@ import net.minecraft.world.level.block.state.BlockState;
 
 public class MinecartHopper extends AbstractMinecartContainer implements Hopper {
     private boolean enabled = true;
+    @javax.annotation.Nullable public java.util.Set<Item> itemFilter; // KioCG
 
     public MinecartHopper(EntityType<? extends MinecartHopper> type, Level world) {
         super(type, world);
@@ -88,6 +89,14 @@ public class MinecartHopper extends AbstractMinecartContainer implements Hopper
 
     }
 
+    // KioCG start
+    @Override
+    public void setCustomName(@javax.annotation.Nullable net.minecraft.network.chat.Component name) {
+        super.setCustomName(name);
+        this.itemFilter = this.hasCustomName() ? HopperBlockEntity.parseItemFilter(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(this.getCustomName())) : null; // KioCG
+    }
+    // KioCG end
+
     public boolean suckInItems() {
         if (HopperBlockEntity.isFullContainer(this, null)) return false; // KioCG
         if (HopperBlockEntity.suckInItems(this.level(), this)) {
diff --git a/src/main/java/net/minecraft/world/level/block/DropperBlock.java b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
index 1d13f8a1009d6eda351c697052d499d594a6aaa8..810d502593a2f36a429ea47ad447e25c62844e9f 100644
--- a/src/main/java/net/minecraft/world/level/block/DropperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
@@ -72,6 +72,8 @@ public class DropperBlock extends DispenserBlock {
                     if (iinventory == null) {
                         itemstack1 = DropperBlock.DISPENSE_BEHAVIOUR.dispense(sourceblock, itemstack);
                     } else {
+                        if (enumdirection == Direction.DOWN && !HopperBlockEntity.suckInFilter(iinventory, itemstack)) return; // KioCG - Hopper filter
+
                         // CraftBukkit start - Fire event when pushing items into other inventories
                         CraftItemStack oitemstack = CraftItemStack.asCraftMirror(itemstack.copy().split(1));
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 74c89dde1d118dc71110b3998e7bbde34018d559..e3f4e2e3d59f5259a972dc6377c824e6fcd76f23 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -53,6 +53,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     // Pufferfish end
     private int cooldownTime;
     private long tickedGameTime;
+    @Nullable private java.util.Set<net.minecraft.world.item.Item> itemFilter; // KioCG
 
     // CraftBukkit start - add fields and methods
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
@@ -122,6 +123,68 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         }
 
         this.cooldownTime = nbt.getInt("TransferCooldown");
+
+        // KioCG start
+        this.itemFilter = this.name != null ? HopperBlockEntity.parseItemFilter(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(this.name)) : null;
+    }
+
+    @Override
+    public void setCustomName(Component customName) {
+        super.setCustomName(customName);
+        this.itemFilter = this.hasCustomName() ? HopperBlockEntity.parseItemFilter(org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(this.getCustomName())) : null; // KioCG
+    }
+
+    @Nullable
+    public static java.util.Set<net.minecraft.world.item.Item> parseItemFilter(String string) {
+        java.util.Set<net.minecraft.world.item.Item> filter = new java.util.HashSet<>();
+
+        for (String split : string.toLowerCase().split(" ")) {
+            if (!split.isEmpty()) {
+                if (split.startsWith("#")) {
+                    split = split.substring(1);
+                    if (!net.minecraft.resources.ResourceLocation.isValidResourceLocation(split)) {
+                        return null;
+                    }
+
+                    net.minecraft.tags.TagKey<net.minecraft.world.item.Item> itemTagKey = net.minecraft.tags.TagKey.create(net.minecraft.core.registries.Registries.ITEM, new net.minecraft.resources.ResourceLocation(split));
+                    java.util.Optional<net.minecraft.core.HolderSet.Named<net.minecraft.world.item.Item>> tag = net.minecraft.core.registries.BuiltInRegistries.ITEM.getTag(itemTagKey);
+                    if (tag.isEmpty()) {
+                        return null;
+                    }
+
+                    for (net.minecraft.core.Holder<net.minecraft.world.item.Item> itemHolder : tag.get()) {
+                        filter.add(itemHolder.value());
+                    }
+                } else {
+                    if (!net.minecraft.resources.ResourceLocation.isValidResourceLocation(split)) {
+                        return null;
+                    }
+
+                    final net.minecraft.world.item.Item item = net.minecraft.core.registries.BuiltInRegistries.ITEM.get(new net.minecraft.resources.ResourceLocation(split));
+                    if (item == net.minecraft.world.item.Items.AIR) {
+                        return null;
+                    }
+
+                    filter.add(item);
+                }
+            }
+        }
+
+        return !filter.isEmpty() ? java.util.Set.copyOf(filter) : null;
+    }
+
+    public static boolean suckInFilter(Container hopper, ItemStack itemstack) {
+        if (hopper instanceof HopperBlockEntity blockEntity) {
+            if (blockEntity.itemFilter != null) {
+                return blockEntity.itemFilter.contains(itemstack.getItem());
+            }
+        } else if (hopper instanceof net.minecraft.world.entity.vehicle.MinecartHopper minecartHopper) {
+            if (minecartHopper.itemFilter != null) {
+                return minecartHopper.itemFilter.contains(itemstack.getItem());
+            }
+        }
+        return true;
+        // KioCG end
     }
 
     @Override
@@ -218,6 +281,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         if (world.isClientSide) {
             return false;
         } else {
+            if (!world.paperConfig().kiocgConfig.hopperPullsLockedContainer && !blockEntity.lockKey.key.isEmpty()) return false; // KioCG
             if (!blockEntity.isOnCooldown() && (Boolean) state.getValue(HopperBlock.ENABLED)) {
                 boolean flag = false;
 
@@ -269,6 +333,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         for (int i = 0; i < hopper.getContainerSize(); ++i) {
             final ItemStack item = hopper.getItem(i);
             if (!item.isEmpty()) {
+                // KioCG start
+                if (direction == Direction.UP && !HopperBlockEntity.suckInFilter(destination, item)) {
+                    cooldownHopper(hopper);
+                    continue;
+                }
+                // KioCG end
+
                 foundItem = true;
                 ItemStack origItemStack = item;
                 ItemStack movedItem = origItemStack;
@@ -309,6 +380,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     private static boolean hopperPull(final Level level, final Hopper hopper, final Container container, ItemStack origItemStack, final int i) {
+        // KioCG start
+        if (!HopperBlockEntity.suckInFilter(hopper, origItemStack)) {
+            cooldownHopper(hopper);
+            return false; // 返回false来正确循环下一个物品
+        }
+        // KioCG end
+
         ItemStack movedItem = origItemStack;
         final int originalItemCount = origItemStack.getCount();
         final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
@@ -567,6 +645,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                 }
                 return false;
             } else {
+                if (!world.paperConfig().kiocgConfig.hopperPullsLockedContainer && iinventory instanceof BaseContainerBlockEntity lockable && !lockable.lockKey.key.isEmpty()) return true; // KioCG
                 for (int slot = 0, max = iinventory.getContainerSize(); slot < max; ++slot) {
                     ItemStack item = iinventory.getItem(slot);
                     if (item.isEmpty() || !canTakeItemFromContainer(hopper, iinventory, item, slot, enumdirection)) {
@@ -648,6 +727,9 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static boolean addItem(Container inventory, ItemEntity itemEntity) {
+        if (!HopperBlockEntity.suckInFilter(inventory, itemEntity.getItem())) return false; // KioCG - Hopper filter
+        if (!itemEntity.level().paperConfig().kiocgConfig.hopperPullsEntityOwnedItem && itemEntity.target != null) return false; // KioCG
+
         boolean flag = false;
         // CraftBukkit start
         if (InventoryPickupItemEvent.getHandlerList().getRegisteredListeners().length > 0) { // Paper - optimize hoppers
