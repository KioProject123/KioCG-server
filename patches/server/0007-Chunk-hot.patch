From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Tue, 21 Mar 2023 05:32:04 +0800
Subject: [PATCH] Chunk hot


diff --git a/src/main/java/com/kiocg/ChunkHot.java b/src/main/java/com/kiocg/ChunkHot.java
new file mode 100644
index 0000000000000000000000000000000000000000..daa106753347fd45882629ed9dad1efe3e3b005f
--- /dev/null
+++ b/src/main/java/com/kiocg/ChunkHot.java
@@ -0,0 +1,35 @@
+package com.kiocg;
+
+public class ChunkHot {
+    private static final int TIMES_LENGTH = 10;
+    private static int index = -1;
+
+    private final long[] times = new long[TIMES_LENGTH];
+    private long total;
+    private long nanos;
+
+    public static void nextTick() {
+        index = ++index % TIMES_LENGTH;
+    }
+
+    public void start() {
+        total -= times[index];
+        times[index] = 0L;
+    }
+
+    public void stop() {
+        total += times[index];
+    }
+
+    public void startTicking() {
+        nanos = System.nanoTime();
+    }
+
+    public void stopTickingAndCount() {
+        times[index] += Math.min(System.nanoTime() - nanos, 1000000L);
+    }
+
+    public long getAverage() {
+        return total / ((long) TIMES_LENGTH * 20L);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b51f50a45214a1a3f9b9ff68acaf1e3aa21ad03f..ace34fa05c0e583cea352a0ad9995d6ebb1f97a1 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1418,6 +1418,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper
 
         ++this.tickCount;
+        if (this.tickCount % 20 == 1) { com.kiocg.ChunkHot.nextTick(); this.startChunkHotTick(); } // KioCG
         this.tickChildren(shouldKeepTicking);
         if (i - this.lastServerStatus >= 5000000000L) {
             this.lastServerStatus = i;
@@ -1457,6 +1458,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end
+        if (this.tickCount % 20 == 0) this.stopChunkHotTick(); // KioCG
         //this.profiler.push("tallying"); // Purpur
         long j = this.tickTimes[this.tickCount % 100] = Util.getNanos() - i;
 
@@ -1474,6 +1476,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper // Purpur
     }
 
+    // KioCG start
+    private void startChunkHotTick() {
+        this.getAllLevels().forEach(level -> level.getChunkSource().getLoadedChunkMap().values().forEach(chunk -> chunk.getChunkHot().start()));
+    }
+
+    private void stopChunkHotTick() {
+        this.getAllLevels().forEach(level -> level.getChunkSource().getLoadedChunkMap().values().forEach(chunk -> chunk.getChunkHot().stop()));
+    }
+    // KioCG end
+
     private ServerStatus buildServerStatus() {
         ServerStatus.Players serverping_serverpingplayersample = this.buildPlayerStatus();
 
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 105cdab3a1c912299dbcfb670ace810b9202731c..696ab73a6972c5043d6421d9b72959febe611972 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -74,6 +74,7 @@ public class ServerChunkCache extends ChunkSource {
     // Paper start
     final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
     final it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> loadedChunkMap = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>(8192, 0.5f);
+    public it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> getLoadedChunkMap() { return this.loadedChunkMap; } // KioCG
 
     private final LevelChunk[] lastLoadedChunks = new LevelChunk[4 * 4];
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 23fd9af9b2d177d9d5329b7a532fd77e1ed1fc14..ad1adc0ceea173f5ad5530dfa88746bae0fcfbe8 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1263,6 +1263,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
         //timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper // Purpur
+        LevelChunk levelChunk = entity.shouldTickHot() ? this.getChunkIfLoaded(entity.blockPosition()) : null; // KioCG
+        if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
         //try { // Purpur
         // Paper end - timings
         entity.setOldPosAndRot();
@@ -1280,6 +1282,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         } else { entity.inactiveTick(); } // Paper - EAR 2
         //this.getProfiler().pop(); // Purpur
         //} finally { timer.stopTiming(); } // Paper - timings // Purpur
+        } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1303,6 +1306,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
                 //co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper // Purpur
+                LevelChunk levelChunk = !(passenger instanceof Player) ? this.getChunkIfLoaded(passenger.blockPosition()) : null; // KioCG
+                if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
                 //try { // Purpur
                 // Paper end
                 passenger.setOldPosAndRot();
@@ -1334,6 +1339,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 }
 
             //} finally { timer.stopTiming(); }// Paper - EAR2 timings // Purpur
+                } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             }
         } else {
             passenger.stopRiding();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 6cc5ceadb5ca74bcd2b89c12eaf588c29897650f..4dab6070d838dabde933f9db6c72c5e83a3e3ba9 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -279,6 +279,7 @@ public class ServerPlayer extends Player {
     private boolean ramBar = false; // Purpur
     private boolean tpsBar = false; // Purpur
     private boolean compassBar = false; // Purpur
+    private long nearbyChunkHot = 0; public long getNearbyChunkHot() { return this.nearbyChunkHot; } // KioCG
 
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
@@ -671,6 +672,8 @@ public class ServerPlayer extends Player {
         return new ServerItemCooldowns(this);
     }
 
+    private static boolean bypassStartup = false; // KioCG
+
     @Override
     public void tick() {
         // CraftBukkit start
@@ -727,6 +730,45 @@ public class ServerPlayer extends Player {
             }
         }
         // Purpur end
+
+        // KioCG start
+        if (bypassStartup) {
+            if (this.server.getTickCount() % 20 == 1) {
+                this.nearbyChunkHot = this.refreshNearbyChunkHot();
+
+                if (this.nearbyChunkHot > 330000L) {
+                    if (this.isAfk) {
+                        this.connection.disconnect(Component.translatable("multiplayer.disconnect.idling"), org.bukkit.event.player.PlayerKickEvent.Cause.IDLING);
+                    } else {
+                        this.sendActionBarMessage("<red><italic>你所在的区块太热辣!");
+                        int fireTicks = (int) (this.nearbyChunkHot / 100000L) * 20;
+                        if (this.getRemainingFireTicks() < fireTicks) {
+                            this.setRemainingFireTicks(fireTicks);
+                        }
+                    }
+                }
+            }
+        } else if (this.server.getTickCount() > 600) {
+            bypassStartup = true;
+        }
+    }
+
+    private long refreshNearbyChunkHot() {
+        net.minecraft.world.level.chunk.LevelChunk chunk = this.getLevel().getChunkAt(this.blockPosition());
+        int x = chunk.locX;
+        int z = chunk.locZ;
+        net.minecraft.world.level.Level world = chunk.getLevel();
+        long total = 0L;
+        for (int i = x - 3; i <= x + 3; ++i) {
+            for (int j = z - 3; j <= z + 3; ++j) {
+                net.minecraft.world.level.chunk.LevelChunk chunk0 = world.getChunkIfLoaded(i, j);
+                if (chunk0 != null) {
+                    total += chunk0.getChunkHot().getAverage();
+                }
+            }
+        }
+        return total;
+        // KioCG end
     }
 
     public void doTick() {
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index fa724cd34a7c469ca12068e64295cd00ad215a3c..9b68f7dc44911795565577e4a218e1044cc2ecd8 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -513,4 +513,11 @@ public class AreaEffectCloud extends Entity implements TraceableEntity {
     public EntityDimensions getDimensions(Pose pose) {
         return EntityDimensions.scalable(this.getRadius() * 2.0F, 0.5F);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 3f59268a8e01cebd9e08984ae754e928b085a0ac..c8b8a97ce2c22ac12964273a3a3f2cbd9716062d 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4741,4 +4741,6 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return false;
     }
     // Purpur end
+
+    public boolean shouldTickHot() { return this.tickCount > 20*10 && this.isAlive(); } // KioCG
 }
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 558c14af6415681909f9e3a15f303ce4d0ec1395..3e973ed77f7b77e52b2f24009d1b54ebac0bbad4 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -286,4 +286,11 @@ public class LightningBolt extends Entity {
     public Stream<Entity> getHitEntities() {
         return this.hitEntities.stream().filter(Entity::isAlive);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 85fdc5a84fc379c579de40069dcf51613a29966c..f5a7439e4f1939ca861b4fb0fdcc9d2172138f08 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1827,4 +1827,11 @@ public abstract class Mob extends LivingEntity implements Targeting {
         }
     }
     // Purpur end
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && (!this.removeWhenFarAway(0.0) || this.isPersistenceRequired() || this.requiresCustomPersistence());
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index df250bace02459d35c7eca4e2703ff2263397265..d42489c2f9bd9afb6aa7325cbf37d741c9c8db9e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -200,4 +200,11 @@ public class TraderLlama extends Llama {
             super.start();
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && !this.canDespawn();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 81e56d544f736ea9fae5997a09ac0a656961f364..b71b6e70ac6c76428cc9ae8b7d2650a9a40a7a6a 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -359,4 +359,11 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
             return !pos.closerToCenterThan(this.trader.position(), proximityDistance);
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index cac03bf0c4fc0f4936e3d3eb6bfd9315a2bfdace..d7485f361d0165182375b77db6fdace3c9bc1446 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -2473,4 +2473,11 @@ public abstract class Player extends LivingEntity {
             return this.message;
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index f6abea3ed0c3838ad591d0d117da26398e608c5a..9478079f2dbc42bd5b386becab26af7988b3b138 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -279,4 +279,11 @@ public abstract class Projectile extends Entity implements TraceableEntity {
 
         return entity instanceof Player ? entity.mayInteract(world, pos) : entity == null || world.purpurConfig.projectilesBypassMobGriefing || world.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 96d7927fb2a2a57e5bc10e680baefa2917a033e2..c483a797972496bed69645071c02989995e03c1c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -87,6 +87,7 @@ public class LevelChunk extends ChunkAccess {
     private final Int2ObjectMap<GameEventListenerRegistry> gameEventListenerRegistrySections;
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
+    private final com.kiocg.ChunkHot chunkHot = new com.kiocg.ChunkHot(); public com.kiocg.ChunkHot getChunkHot() { return this.chunkHot; } // KioCG
 
     public LevelChunk(Level world, ChunkPos pos) {
         this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null);
@@ -1310,6 +1311,7 @@ public class LevelChunk extends ChunkAccess {
 
                         //gameprofilerfiller.push(this::getType); // Purpur
                         //this.blockEntity.tickTimer.startTiming(); // Spigot // Purpur
+                        LevelChunk.this.chunkHot.startTicking(); // KioCG
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
                         if (this.blockEntity.getType().isValid(iblockdata)) {
@@ -1332,6 +1334,7 @@ public class LevelChunk extends ChunkAccess {
                         // Spigot start
                     } finally {
                         //this.blockEntity.tickTimer.stopTiming(); // Purpur
+                        LevelChunk.this.chunkHot.stopTickingAndCount(); // KioCG
                         // Spigot end
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index 19faa8f5f891c1ffbed0af8391dee8202433c447..a3503375133e5ed14dc7092bd403f2266fffa628 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -63,7 +63,10 @@ public interface NeighborUpdater {
                 }
             }
             // CraftBukkit end
+            net.minecraft.world.level.chunk.LevelChunk levelChunk = world.getChunkIfLoaded(pos); // KioCG
+            if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
             state.neighborChanged(world, pos, sourceBlock, sourcePos, notify);
+            } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             // Spigot Start
         } catch (StackOverflowError ex) {
             world.lastPhysicsProblem = new BlockPos(pos);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index edb726d7db0c2e1c276458c997bbfed9b76b69d4..bdbb02c2209fe251756bbaba08b17ccd0fd5e09a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -94,6 +94,13 @@ public class CraftChunk implements Chunk {
         return c;
     }
 
+    // KioCG start
+    @Override
+    public long getChunkHot() {
+        return this.getHandle().getChunkHot().getAverage();
+    }
+    // KioCG end
+
     void breakLink() {
         this.weakChunk.clear();
     }
diff --git a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
index 8769993e7ca59da309087051a3cd38fc562c15d1..2d9c05b187d3b740401db88418d214007a64d309 100644
--- a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
+++ b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
@@ -31,6 +31,7 @@ public class TPSBarTask extends BossBarTask {
         bossbar.progress(getBossBarProgress());
         bossbar.color(getBossBarColor());
         bossbar.name(MiniMessage.miniMessage().deserialize(PurpurConfig.commandTPSBarTitle,
+                Placeholder.component("hot", getHotColor(((org.bukkit.craftbukkit.entity.CraftPlayer)player).getHandle().getNearbyChunkHot())), // KioCG
                 Placeholder.component("tps", getTPSColor()),
                 Placeholder.component("mspt", getMSPTColor()),
                 Placeholder.component("ping", getPingColor(player.getPing()))
@@ -136,6 +137,18 @@ public class TPSBarTask extends BossBarTask {
         return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", ping)));
     }
 
+    // KioCG start
+    private Component getHotColor(long hot) {
+        String color;
+        if (hot < 300000L) {
+            color = PurpurConfig.commandTPSBarTextColorGood;
+        } else {
+            color = PurpurConfig.commandTPSBarTextColorLow;
+        }
+        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", hot)));
+    }
+    // KioCG end
+
     public enum FillMode {
         TPS, MSPT, PING
     }
