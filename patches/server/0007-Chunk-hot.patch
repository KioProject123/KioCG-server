From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Tue, 23 Jan 2024 03:32:51 +0800
Subject: [PATCH] Chunk hot


diff --git a/src/main/java/com/kiocg/ChunkHot.java b/src/main/java/com/kiocg/ChunkHot.java
new file mode 100644
index 0000000000000000000000000000000000000000..80ccbe11768b3da176987c31be13bc35b9d85200
--- /dev/null
+++ b/src/main/java/com/kiocg/ChunkHot.java
@@ -0,0 +1,86 @@
+package com.kiocg;
+
+import java.util.Arrays;
+
+public class ChunkHot {
+    // 热度统计总区间数量
+    private static final int TIMES_LENGTH = 10;
+    // 当前统计区间下标
+    private static int index = -1;
+
+    // 热度统计区间
+    private final long[] times = new long[TIMES_LENGTH];
+    // 存放临时的区间数值
+    // 用于修正正在统计的当前区间热度没有计入总值的问题
+    private long temp;
+    // 所有区间的热度总值
+    private long total;
+
+    // 用于每个具体统计的计算
+    private long nanos;
+    // 当前统计是否进行中
+    private boolean started = false;
+
+    /**
+     * 更新区间下标
+     */
+    public static void nextTick() {
+        index = ++index % TIMES_LENGTH;
+    }
+
+    /**
+     * 开始统计一个新区间
+     */
+    public void start() {
+        started = true;
+        temp = times[index];
+        times[index] = 0L;
+    }
+
+    /**
+     * 结束当前区间的统计
+     * 将统计值更新入热度总值
+     */
+    public void stop() {
+        started = false;
+        total -= temp;
+        total += times[index];
+    }
+
+    /**
+     * 开始一个具体统计
+     */
+    public void startTicking() {
+        if (!started) return;
+        nanos = System.nanoTime();
+    }
+
+    /**
+     * 结束一个具体统计
+     * 将统计值计入当前热度区间
+     */
+    public void stopTickingAndCount() {
+        if (!started) return;
+        // 定义一个具体统计的最大值为 1,000,000
+        // 有时候某个具体统计的计算值会在某1刻飙升，可能是由于保存数据到磁盘？
+        times[index] += Math.min(System.nanoTime() - nanos, 1000000L);
+    }
+
+    /**
+     * 清空统计 (当区块卸载时)
+     */
+    public void clear() {
+        started = false;
+        Arrays.fill(times, 0L);
+        temp = 0L;
+        total = 0L;
+        nanos = 0L;
+    }
+
+    /**
+     * @return 获取区块热度平均值
+     */
+    public long getAverage() {
+        return total / ((long) TIMES_LENGTH * 20L);
+    }
+}
diff --git a/src/main/java/com/kiocg/command/ChunkHotCommand.java b/src/main/java/com/kiocg/command/ChunkHotCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..70d1613313bede45414ac046d539e3a8560ceaa6
--- /dev/null
+++ b/src/main/java/com/kiocg/command/ChunkHotCommand.java
@@ -0,0 +1,31 @@
+package com.kiocg.command;
+
+import com.mojang.brigadier.CommandDispatcher;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.server.level.ServerPlayer;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class ChunkHotCommand {
+    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("chunkhot")
+                .requires((listener) -> listener.hasPermission(2, "bukkit.command.chunkhot"))
+                .executes((context) -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException())))
+                .then(Commands.argument("targets", EntityArgument.players())
+                        .requires(listener -> listener.hasPermission(2, "bukkit.command.chunkhot.other"))
+                        .executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets")))
+                )
+        );
+    }
+
+    private static int execute(CommandSourceStack sender, Collection<ServerPlayer> targets) {
+        for (ServerPlayer player : targets) {
+            String output = String.format("<green>[<aqua>豆渣子<green>] <gold>区块%s的热度: %s", player.chunkPosition(), player.level().getChunkAt(player.blockPosition()).getChunkHot().getAverage());
+            sender.sendSuccess(output, false);
+        }
+        return targets.size();
+    }
+}
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index cf2fec7817c4077e56b4db7932e9df3404b72bd1..ee6c4ac72efd674c3a35fcbec5b9f363f2f5413d 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -550,7 +550,12 @@ public class WorldConfiguration extends ConfigurationPart {
     public KiocgConfig kiocgConfig;
 
     public class KiocgConfig extends ConfigurationPart {
+        public ChunkHot chunkHot;
 
+        public class ChunkHot extends ConfigurationPart {
+            public long phaseOne = 300000L;
+            public long phaseTwo = 700000L;
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index b203394ed62807e7d5df433830993f1d2ee14939..7e48c4eec15c799572c6c90e1ffd7751d20ac432 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -258,6 +258,7 @@ public class Commands {
             org.purpurmc.purpur.command.CompassCommand.register(this.dispatcher); // Purpur
             org.purpurmc.purpur.command.RamBarCommand.register(this.dispatcher); // Purpur
             org.purpurmc.purpur.command.RamCommand.register(this.dispatcher); // Purpur
+            com.kiocg.command.ChunkHotCommand.register(this.dispatcher); // KioCG
         }
 
         if (environment.includeIntegrated) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 34747338383d045c206f863ecf578a680f339148..5650406698ba2806de3495651bfdb308fb02fab6 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1544,6 +1544,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper - Server Tick Events
 
         ++this.tickCount;
+        if (this.tickCount % 20 == 1) { com.kiocg.ChunkHot.nextTick(); this.startChunkHotTick(); } // KioCG
         this.tickRateManager.tick();
         this.tickChildren(shouldKeepTicking);
         if (i - this.lastServerStatus >= MinecraftServer.STATUS_EXPIRE_TIME_NANOS) {
@@ -1585,6 +1586,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end - Server Tick Events
+        if (this.tickCount % 20 == 0) this.stopChunkHotTick(); // KioCG
         //this.profiler.push("tallying"); // Purpur
         long j = Util.getNanos() - i;
         int k = this.tickCount % 100;
@@ -1606,6 +1608,26 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper // Purpur
     }
 
+    // KioCG start
+    private void startChunkHotTick() {
+        this.getAllLevels().forEach(level -> {
+            final Iterator<net.minecraft.world.level.chunk.LevelChunk> iterator = level.getChunkSource().tickingChunks.unsafeIterator();
+            while (iterator.hasNext()) {
+                iterator.next().getChunkHot().start();
+            }
+        });
+    }
+
+    private void stopChunkHotTick() {
+        this.getAllLevels().forEach(level -> {
+            final Iterator<net.minecraft.world.level.chunk.LevelChunk> iterator = level.getChunkSource().tickingChunks.unsafeIterator();
+            while (iterator.hasNext()) {
+                iterator.next().getChunkHot().stop();
+            }
+        });
+    }
+    // KioCG end
+
     private int computeNextAutosaveInterval() {
         float f;
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index fb6b762bac4d36b2e307b5343988884fa339d001..3df99bd201c22ac3a6494412b3831480ff58afa1 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1477,6 +1477,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
         //timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper // Purpur
+        LevelChunk levelChunk = entity.shouldTickHot() ? this.getChunkIfLoaded(entity.blockPosition()) : null; // KioCG
+        if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
         //try { // Purpur
         // Paper end - timings
         entity.setOldPosAndRot();
@@ -1494,6 +1496,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         } else { entity.inactiveTick(); } // Paper - EAR 2
         //this.getProfiler().pop(); // Purpur
         //} finally { timer.stopTiming(); } // Paper - timings // Purpur
+        } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1517,6 +1520,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
                 //co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper // Purpur
+                LevelChunk levelChunk = !(passenger instanceof Player) ? this.getChunkIfLoaded(passenger.blockPosition()) : null; // KioCG
+                if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
                 //try { // Purpur
                 // Paper end
                 passenger.setOldPosAndRot();
@@ -1548,6 +1553,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 }
 
             //} finally { timer.stopTiming(); }// Paper - EAR2 timings // Purpur
+                } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             }
         } else {
             passenger.stopRiding();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 66ea5837dbfa9762d395f1bd754912587eeca38d..4fc544fb7bbe68b4d70bbc9c326c852114a35e99 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -285,6 +285,7 @@ public class ServerPlayer extends Player {
     private boolean tpsBar = false; // Purpur
     private boolean compassBar = false; // Purpur
     private boolean ramBar = false; // Purpur
+    private long nearbyChunkHot = 0; public long getNearbyChunkHot() { return this.nearbyChunkHot; } // KioCG
 
     // Paper start - replace player chunk loader
     private final java.util.concurrent.atomic.AtomicReference<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> viewDistances = new java.util.concurrent.atomic.AtomicReference<>(new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances(-1, -1, -1));
@@ -781,6 +782,51 @@ public class ServerPlayer extends Player {
             }
         }
         // Purpur end
+
+        // KioCG start
+        if (this.server.getTickCount() % 20 == 1) {
+            this.nearbyChunkHot = this.refreshNearbyChunkHot();
+            if (this.nearbyChunkHot < this.level().paperConfig().kiocgConfig.chunkHot.phaseOne) {
+                this.hasVisualFire = false;
+                chunkHotPhaseOneTick = 0;
+                chunkHotPhaseTwoTick = 0;
+            } else if (this.nearbyChunkHot < this.level().paperConfig().kiocgConfig.chunkHot.phaseTwo && ++chunkHotPhaseOneTick >= 10) {
+                this.hasVisualFire = false;
+                if (this.isAfk || MinecraftServer.getServer().lagging) {
+                    this.connection.disconnect(Component.translatable("multiplayer.disconnect.idling"), org.bukkit.event.player.PlayerKickEvent.Cause.IDLING);
+                }
+            } else if (++chunkHotPhaseTwoTick >= 10) {
+                this.hasVisualFire = false;
+                if (this.isAfk || MinecraftServer.getServer().lagging) {
+                    this.connection.disconnect(Component.translatable("multiplayer.disconnect.idling"), org.bukkit.event.player.PlayerKickEvent.Cause.IDLING);
+                } else {
+                    this.hasVisualFire = true;
+                    this.hurt(this.damageSources().generic(), 2.0F);
+                    this.sendActionBarMessage("<red><italic>你所在的区域太热辣!");
+                }
+            }
+        }
+    }
+
+    private int chunkHotPhaseOneTick = 0;
+    private int chunkHotPhaseTwoTick = 0;
+
+    private long refreshNearbyChunkHot() {
+        net.minecraft.world.level.chunk.LevelChunk chunk = this.level().getChunkAt(this.blockPosition());
+        int x = chunk.locX;
+        int z = chunk.locZ;
+        net.minecraft.world.level.Level world = chunk.getLevel();
+        long total = 0L;
+        for (int i = x - 4; i <= x + 4; ++i) {
+            for (int j = z - 4; j <= z + 4; ++j) {
+                net.minecraft.world.level.chunk.LevelChunk chunk0 = world.getChunkIfLoaded(i, j);
+                if (chunk0 != null) {
+                    total += chunk0.getChunkHot().getAverage();
+                }
+            }
+        }
+        return total;
+        // KioCG end
     }
 
     public void doTick() {
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 094ab43e5a209ea848bf0994db9018281c64e08d..e2084013770e78d006ddd9547f6c9040aceb22c9 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -498,4 +498,11 @@ public class AreaEffectCloud extends Entity implements TraceableEntity {
     public EntityDimensions getDimensions(Pose pose) {
         return EntityDimensions.scalable(this.getRadius() * 2.0F, 0.5F);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2092ede561d14ace1c003ced051cd4967bb41beb..be4feeef0276e8872ee2242e30c13f97b2e22074 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -5106,4 +5106,6 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         return false;
     }
     // Purpur end
+
+    public boolean shouldTickHot() { return this.tickCount > 20*10 && this.isAlive(); } // KioCG
 }
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 0a8a53710c693a220e9475f6f3112b91d8209c00..5053852c72b68db41a2f51a72fffa1f8fe09b8da 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -287,4 +287,11 @@ public class LightningBolt extends Entity {
     public Stream<Entity> getHitEntities() {
         return this.hitEntities.stream().filter(Entity::isAlive);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 5099c6d84fbb55952759498e623c8a1964ffbe5b..6b477300535295b6c58b9a0340e52d067cd49b65 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1866,4 +1866,11 @@ public abstract class Mob extends LivingEntity implements Targeting {
         }
     }
     // Purpur end
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && (!this.removeWhenFarAway(0.0) || this.isPersistenceRequired() || this.requiresCustomPersistence());
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index c80324d79b74fc620568347289f4e39629162409..82c149cefb5b6b63e293527f46ea86a711075229 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -218,4 +218,11 @@ public class TraderLlama extends Llama {
             super.start();
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return super.shouldTickHot() && !this.canDespawn();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index e491a391d452df9c79935232dedd03c47c3d50ca..e341ceabe8d2947a22e4c23812ff20afc0447863 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -370,4 +370,11 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
             return !pos.closerToCenterThan(this.trader.position(), proximityDistance);
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 43199815ffe3d666577390b96187aa898ceb910e..f194b2faa9765f68ba10f0d88c05656172921db4 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -2473,4 +2473,11 @@ public abstract class Player extends LivingEntity {
             return this.message;
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 577df1ad8eb57ae7a53c9931c379824a6882fa5f..4ae5164833ba87c07b7204603c1f88b1d9cb11cf 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -340,4 +340,11 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     public boolean mayBreak(Level world) {
         return this.getType().is(EntityTypeTags.IMPACT_PROJECTILES) && world.getGameRules().getBoolean(GameRules.RULE_PROJECTILESCANBREAKBLOCKS);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 14e58e7ce2120da624459bfe7179fed60593b95d..90048a6da1d58992677986abbfac21af938d842d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -85,6 +85,7 @@ public class LevelChunk extends ChunkAccess {
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
     public volatile FullChunkStatus chunkStatus = FullChunkStatus.INACCESSIBLE; // Paper - rewrite chunk system
+    private final com.kiocg.ChunkHot chunkHot = new com.kiocg.ChunkHot(); public com.kiocg.ChunkHot getChunkHot() { return this.chunkHot; } // KioCG
 
     // Pufferfish start - instead of using a random every time the chunk is ticked, define when lightning strikes preemptively
     private int lightningTick;
@@ -768,6 +769,7 @@ public class LevelChunk extends ChunkAccess {
     }
 
     public void onChunkNotTicking(io.papermc.paper.chunk.system.scheduling.NewChunkHolder chunkHolder) {
+        this.chunkHot.clear(); // KioCG
         io.papermc.paper.chunk.system.ChunkSystem.onChunkNotTicking(this, chunkHolder.vanillaChunkHolder);
     }
 
@@ -1178,6 +1180,7 @@ public class LevelChunk extends ChunkAccess {
 
                         //gameprofilerfiller.push(this::getType);
                         //this.blockEntity.tickTimer.startTiming(); // Spigot // Purpur
+                        LevelChunk.this.chunkHot.startTicking(); // KioCG
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
                         if (this.blockEntity.getType().isValid(iblockdata)) {
@@ -1200,6 +1203,7 @@ public class LevelChunk extends ChunkAccess {
                         // Spigot start
                     } finally {
                         //this.blockEntity.tickTimer.stopTiming(); // Purpur
+                        LevelChunk.this.chunkHot.stopTickingAndCount(); // KioCG
                         // Spigot end
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index 19faa8f5f891c1ffbed0af8391dee8202433c447..a3503375133e5ed14dc7092bd403f2266fffa628 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -63,7 +63,10 @@ public interface NeighborUpdater {
                 }
             }
             // CraftBukkit end
+            net.minecraft.world.level.chunk.LevelChunk levelChunk = world.getChunkIfLoaded(pos); // KioCG
+            if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
             state.neighborChanged(world, pos, sourceBlock, sourcePos, notify);
+            } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             // Spigot Start
         } catch (StackOverflowError ex) {
             world.lastPhysicsProblem = new BlockPos(pos);
diff --git a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
index 8769993e7ca59da309087051a3cd38fc562c15d1..d9e1032dc2b2d167ff9e33a47fb9fa52b22888a8 100644
--- a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
+++ b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
@@ -31,6 +31,7 @@ public class TPSBarTask extends BossBarTask {
         bossbar.progress(getBossBarProgress());
         bossbar.color(getBossBarColor());
         bossbar.name(MiniMessage.miniMessage().deserialize(PurpurConfig.commandTPSBarTitle,
+                Placeholder.component("hot", getHotColor(((org.bukkit.craftbukkit.entity.CraftPlayer)player).getHandle())), // KioCG
                 Placeholder.component("tps", getTPSColor()),
                 Placeholder.component("mspt", getMSPTColor()),
                 Placeholder.component("ping", getPingColor(player.getPing()))
@@ -136,6 +137,21 @@ public class TPSBarTask extends BossBarTask {
         return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", ping)));
     }
 
+    // KioCG start
+    private Component getHotColor(net.minecraft.server.level.ServerPlayer player) {
+        String color;
+        long hot = player.getNearbyChunkHot();
+        if (hot < player.level().paperConfig().kiocgConfig.chunkHot.phaseOne) {
+            color = PurpurConfig.commandTPSBarTextColorGood;
+        } else if (hot < player.level().paperConfig().kiocgConfig.chunkHot.phaseTwo) {
+            color = PurpurConfig.commandTPSBarTextColorMedium;
+        } else {
+            color = PurpurConfig.commandTPSBarTextColorLow;
+        }
+        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", hot)));
+    }
+    // KioCG end
+
     public enum FillMode {
         TPS, MSPT, PING
     }
