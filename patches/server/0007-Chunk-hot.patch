From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sat, 10 Dec 2022 02:59:22 +0800
Subject: [PATCH] Chunk hot


diff --git a/src/main/java/com/kiocg/ChunkHot.java b/src/main/java/com/kiocg/ChunkHot.java
new file mode 100644
index 0000000000000000000000000000000000000000..daa106753347fd45882629ed9dad1efe3e3b005f
--- /dev/null
+++ b/src/main/java/com/kiocg/ChunkHot.java
@@ -0,0 +1,35 @@
+package com.kiocg;
+
+public class ChunkHot {
+    private static final int TIMES_LENGTH = 10;
+    private static int index = -1;
+
+    private final long[] times = new long[TIMES_LENGTH];
+    private long total;
+    private long nanos;
+
+    public static void nextTick() {
+        index = ++index % TIMES_LENGTH;
+    }
+
+    public void start() {
+        total -= times[index];
+        times[index] = 0L;
+    }
+
+    public void stop() {
+        total += times[index];
+    }
+
+    public void startTicking() {
+        nanos = System.nanoTime();
+    }
+
+    public void stopTickingAndCount() {
+        times[index] += Math.min(System.nanoTime() - nanos, 1000000L);
+    }
+
+    public long getAverage() {
+        return total / ((long) TIMES_LENGTH * 20L);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 551913ee80cb5a500921726eaaa3b4b4c91be052..c2a6c57be8ffca3c4acabfbed0e5b353ca19dfa0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1421,6 +1421,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper
 
         ++this.tickCount;
+        if (this.tickCount % 20 == 1) { com.kiocg.ChunkHot.nextTick(); this.startChunkHotTick(); } // KioCG
         this.tickChildren(shouldKeepTicking);
         if (i - this.lastServerStatus >= 5000000000L) {
             this.lastServerStatus = i;
@@ -1477,6 +1478,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.tickCount, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end
+        if (this.tickCount % 20 == 0) this.stopChunkHotTick(); // KioCG
         //this.profiler.push("tallying"); // Purpur
         long l = this.tickTimes[this.tickCount % 100] = Util.getNanos() - i;
 
@@ -1495,6 +1497,16 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper // Purpur
     }
 
+    // KioCG start
+    private void startChunkHotTick() {
+        this.getAllLevels().forEach(level -> level.getChunkSource().getLoadedChunkMap().values().forEach(chunk -> chunk.getChunkHot().start()));
+    }
+
+    private void stopChunkHotTick() {
+        this.getAllLevels().forEach(level -> level.getChunkSource().getLoadedChunkMap().values().forEach(chunk -> chunk.getChunkHot().stop()));
+    }
+    // KioCG end
+
     public void tickChildren(BooleanSupplier shouldKeepTicking) {
         //MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper // Purpur
         this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 0ae45cf5a084fd412305e8b2f5dabe608b4eb1c1..00929affdaefdc0c9f86236fc0e47719b9cfc68f 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -74,6 +74,7 @@ public class ServerChunkCache extends ChunkSource {
     // Paper start
     final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
     final it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> loadedChunkMap = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>(8192, 0.5f);
+    public it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> getLoadedChunkMap() { return this.loadedChunkMap; } // KioCG
 
     private final LevelChunk[] lastLoadedChunks = new LevelChunk[4 * 4];
     
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 5885a752aa9657444263d0eb34af4abca6b8f46f..781ecfafc553441005bba3a88e8b3dde237014fc 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1280,6 +1280,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // Paper start- timings
         final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
         //timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper // Purpur
+        LevelChunk levelChunk = entity.shouldTickHot() ? this.getChunkIfLoaded(entity.blockPosition()) : null; // KioCG
+        if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
         //try { // Purpur
         // Paper end - timings
         entity.setOldPosAndRot();
@@ -1297,6 +1299,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         } else { entity.inactiveTick(); } // Paper - EAR 2
         //this.getProfiler().pop(); // Purpur
         //} finally { timer.stopTiming(); } // Paper - timings // Purpur
+        } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
         Iterator iterator = entity.getPassengers().iterator();
 
         while (iterator.hasNext()) {
@@ -1320,6 +1323,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 // Paper - EAR 2
                 final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(passenger);
                 //co.aikar.timings.Timing timer = isActive ? passenger.getType().passengerTickTimer.startTiming() : passenger.getType().passengerInactiveTickTimer.startTiming(); // Paper // Purpur
+                LevelChunk levelChunk = !(passenger instanceof Player) ? this.getChunkIfLoaded(passenger.blockPosition()) : null; // KioCG
+                if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
                 //try { // Purpur
                 // Paper end
                 passenger.setOldPosAndRot();
@@ -1351,6 +1356,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 }
 
             //} finally { timer.stopTiming(); }// Paper - EAR2 timings // Purpur
+                } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             }
         } else {
             passenger.stopRiding();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 225a0641816965b7daf0626228dabbc6628b6269..3f5df08bcd4a2bf270566e9c36007b25c7df12f1 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -273,6 +273,7 @@ public class ServerPlayer extends Player {
     private boolean ramBar = false; // Purpur
     private boolean tpsBar = false; // Purpur
     private boolean compassBar = false; // Purpur
+    private long nearbyChunkHot = 0; public long getNearbyChunkHot() { return this.nearbyChunkHot; } // KioCG
 
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
@@ -665,6 +666,8 @@ public class ServerPlayer extends Player {
         return new ServerItemCooldowns(this);
     }
 
+    private static boolean bypassStartup = false; // KioCG
+
     @Override
     public void tick() {
         // CraftBukkit start
@@ -721,6 +724,45 @@ public class ServerPlayer extends Player {
             }
         }
         // Purpur end
+
+        // KioCG start
+        if (bypassStartup) {
+            if (this.server.getTickCount() % 20 == 1) {
+                this.nearbyChunkHot = this.refreshNearbyChunkHot();
+
+                if (this.nearbyChunkHot > 330000L) {
+                    if (this.isAfk) {
+                        this.connection.disconnect(Component.translatable("multiplayer.disconnect.idling"), org.bukkit.event.player.PlayerKickEvent.Cause.IDLING);
+                    } else {
+                        this.sendActionBarMessage("<red><italic>你所在的区块太热辣!");
+                        int fireTicks = (int) (this.nearbyChunkHot / 100000L) * 20;
+                        if (this.getRemainingFireTicks() < fireTicks) {
+                            this.setRemainingFireTicks(fireTicks);
+                        }
+                    }
+                }
+            }
+        } else if (this.server.getTickCount() > 600) {
+            bypassStartup = true;
+        }
+    }
+
+    private long refreshNearbyChunkHot() {
+        net.minecraft.world.level.chunk.LevelChunk chunk = this.getLevel().getChunkAt(this.blockPosition());
+        int x = chunk.locX;
+        int z = chunk.locZ;
+        net.minecraft.world.level.Level world = chunk.getLevel();
+        long total = 0L;
+        for (int i = x - 3; i <= x + 3; ++i) {
+            for (int j = z - 3; j <= z + 3; ++j) {
+                net.minecraft.world.level.chunk.LevelChunk chunk0 = world.getChunkIfLoaded(i, j);
+                if (chunk0 != null) {
+                    total += chunk0.getChunkHot().getAverage();
+                }
+            }
+        }
+        return total;
+        // KioCG end
     }
 
     public void doTick() {
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 11a6f5b9e726453979d4c718c32a44024e1b8a08..f2202483b14f7c3121c49c26371c07ac517cc95f 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -510,4 +510,11 @@ public class AreaEffectCloud extends Entity {
     public EntityDimensions getDimensions(Pose pose) {
         return EntityDimensions.scalable(this.getRadius() * 2.0F, 0.5F);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1ae7ef3d94d4d3d8413a5419eeb9fadad89d2f8d..4a5a97f8a9c03a25cef42a9f38b2c5d6b35f0221 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4746,4 +4746,6 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return false;
     }
     // Purpur end
+
+    public boolean shouldTickHot() { return true; } // KioCG
 }
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 0142aff35dea5bf5aff55e3293fb2d173c97e677..32b5be45f121507905d782e3faf9865bc09d8d9a 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -286,4 +286,11 @@ public class LightningBolt extends Entity {
     public Stream<Entity> getHitEntities() {
         return this.hitEntities.stream().filter(Entity::isAlive);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 755c7a34497e50457380a3b86f6ff1cd55bb39f8..f58e7aa449ebbeb5a26469ec2428fc630fb9cc02 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -1807,4 +1807,11 @@ public abstract class Mob extends LivingEntity {
         }
     }
     // Purpur end
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return !this.removeWhenFarAway(0.0) || this.isPersistenceRequired() || this.requiresCustomPersistence();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index b315bcd383598f7be371feed459da962c13a55f2..6c1d9519c0b62da4a211911eddb65324b7186dfe 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -215,4 +215,11 @@ public class TraderLlama extends Llama {
             super.start();
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return !this.canDespawn();
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index f48c34dfb1ebbbe77031eccb17772f91b772f252..0925cef3493efbd2182f12beb4f5a8c0faf6b8f6 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -348,4 +348,11 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
             return !pos.closerToCenterThan(this.trader.position(), proximityDistance);
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 0c632cd0cb932a4cfaf2288c9d109325d5287537..389cd48ab1265aafcbd4578c475c751428da3fb0 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -2451,4 +2451,11 @@ public abstract class Player extends LivingEntity {
             return this.message;
         }
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 7e620e7ea23943a8639a437d7937da2784b59f60..e2f3bedfd1dc7f94d5c77bccf417fe391d7e0e36 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -305,4 +305,11 @@ public abstract class Projectile extends Entity {
 
         return entity instanceof Player ? entity.mayInteract(world, pos) : entity == null || world.purpurConfig.projectilesBypassMobGriefing || world.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
     }
+
+    // KioCG start
+    @Override
+    public boolean shouldTickHot() {
+        return false;
+    }
+    // KioCG end
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 79bf9c277fe98df176113de39360fb34ad917577..589a660ed1efae1034dcfa611a224610bce7e1e2 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -87,6 +87,7 @@ public class LevelChunk extends ChunkAccess {
     private final Int2ObjectMap<GameEventListenerRegistry> gameEventListenerRegistrySections;
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
+    private final com.kiocg.ChunkHot chunkHot = new com.kiocg.ChunkHot(); public com.kiocg.ChunkHot getChunkHot() { return this.chunkHot; } // KioCG
 
     // Pufferfish start - instead of using a random every time the chunk is ticked, define when lightning strikes preemptively
     private int lightningTick;
@@ -1311,6 +1312,7 @@ public class LevelChunk extends ChunkAccess {
 
                         //gameprofilerfiller.push(this::getType); // Purpur
                         //this.blockEntity.tickTimer.startTiming(); // Spigot // Purpur
+                        LevelChunk.this.chunkHot.startTicking(); // KioCG
                         BlockState iblockdata = LevelChunk.this.getBlockState(blockposition);
 
                         if (this.blockEntity.getType().isValid(iblockdata)) {
@@ -1333,6 +1335,7 @@ public class LevelChunk extends ChunkAccess {
                         // Spigot start
                     } finally {
                         //this.blockEntity.tickTimer.stopTiming(); // Purpur
+                        LevelChunk.this.chunkHot.stopTickingAndCount(); // KioCG
                         // Spigot end
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index 19faa8f5f891c1ffbed0af8391dee8202433c447..a3503375133e5ed14dc7092bd403f2266fffa628 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -63,7 +63,10 @@ public interface NeighborUpdater {
                 }
             }
             // CraftBukkit end
+            net.minecraft.world.level.chunk.LevelChunk levelChunk = world.getChunkIfLoaded(pos); // KioCG
+            if (levelChunk != null) levelChunk.getChunkHot().startTicking(); try { // KioCG
             state.neighborChanged(world, pos, sourceBlock, sourcePos, notify);
+            } finally { if (levelChunk != null) levelChunk.getChunkHot().stopTickingAndCount(); } // KioCG
             // Spigot Start
         } catch (StackOverflowError ex) {
             world.lastPhysicsProblem = new BlockPos(pos);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index edb726d7db0c2e1c276458c997bbfed9b76b69d4..bdbb02c2209fe251756bbaba08b17ccd0fd5e09a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -94,6 +94,13 @@ public class CraftChunk implements Chunk {
         return c;
     }
 
+    // KioCG start
+    @Override
+    public long getChunkHot() {
+        return this.getHandle().getChunkHot().getAverage();
+    }
+    // KioCG end
+
     void breakLink() {
         this.weakChunk.clear();
     }
diff --git a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
index 8769993e7ca59da309087051a3cd38fc562c15d1..2d9c05b187d3b740401db88418d214007a64d309 100644
--- a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
+++ b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
@@ -31,6 +31,7 @@ public class TPSBarTask extends BossBarTask {
         bossbar.progress(getBossBarProgress());
         bossbar.color(getBossBarColor());
         bossbar.name(MiniMessage.miniMessage().deserialize(PurpurConfig.commandTPSBarTitle,
+                Placeholder.component("hot", getHotColor(((org.bukkit.craftbukkit.entity.CraftPlayer)player).getHandle().getNearbyChunkHot())), // KioCG
                 Placeholder.component("tps", getTPSColor()),
                 Placeholder.component("mspt", getMSPTColor()),
                 Placeholder.component("ping", getPingColor(player.getPing()))
@@ -136,6 +137,18 @@ public class TPSBarTask extends BossBarTask {
         return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", ping)));
     }
 
+    // KioCG start
+    private Component getHotColor(long hot) {
+        String color;
+        if (hot < 300000L) {
+            color = PurpurConfig.commandTPSBarTextColorGood;
+        } else {
+            color = PurpurConfig.commandTPSBarTextColorLow;
+        }
+        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", hot)));
+    }
+    // KioCG end
+
     public enum FillMode {
         TPS, MSPT, PING
     }
