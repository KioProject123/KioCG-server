From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 16 Jun 2023 05:20:21 +0800
Subject: [PATCH] Lobotomized animals


diff --git a/src/main/java/com/kiocg/entity/Lobotomized.java b/src/main/java/com/kiocg/entity/Lobotomized.java
new file mode 100644
index 0000000000000000000000000000000000000000..4fe89ac58ed27baeac4105c1b4bfa163dd756a59
--- /dev/null
+++ b/src/main/java/com/kiocg/entity/Lobotomized.java
@@ -0,0 +1,51 @@
+package com.kiocg.entity;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.pathfinder.PathComputationType;
+
+public class Lobotomized {
+    private boolean isLobotomized = false;
+
+    public boolean isLobotomized() {
+        return this.isLobotomized;
+    }
+
+    public void setLobotomized(boolean b) {
+        this.isLobotomized = b;
+    }
+
+    public boolean checkLobotomized(LivingEntity livingEntity) {
+        if (!livingEntity.onGround()) {
+            return this.isLobotomized = false;
+        }
+        int interval = livingEntity.level().purpurConfig.villagerLobotomizeCheckInterval;
+        if ((livingEntity.getId() + livingEntity.tickCount) % interval == 0) {
+            // offset Y for short blocks like dirt_path/farmland
+            // 扩展到半砖高度 (希望不会出问题!)
+            this.isLobotomized = !canTravelFrom(BlockPos.containing(livingEntity.getX(), livingEntity.getBoundingBox().minY + 0.5000001D, livingEntity.getZ()), livingEntity.level(), livingEntity.getBbHeight() <= 1.0F);
+        }
+        return this.isLobotomized;
+    }
+
+    private boolean canTravelFrom(BlockPos pos, Level level, boolean ignoreTop) {
+        return canTravelTo(pos.east(), level, ignoreTop) || canTravelTo(pos.west(), level, ignoreTop) || canTravelTo(pos.north(), level, ignoreTop) || canTravelTo(pos.south(), level, ignoreTop);
+    }
+
+    private boolean canTravelTo(BlockPos pos, Level level, boolean ignoreTop) {
+        net.minecraft.world.level.block.state.BlockState state = level.getBlockStateIfLoaded(pos);
+        if (state == null) {
+            // chunk not loaded
+            return false;
+        }
+
+        // 优化单格生物的检测
+        if (ignoreTop) {
+            return state.isPathfindable(level, pos, PathComputationType.LAND);
+        }
+
+        // only if both blocks have no collision
+        return state.isPathfindable(level, pos, PathComputationType.LAND) && level.getBlockState(pos.above()).isPathfindable(level, pos, PathComputationType.LAND);
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b35bdfad93c5bd601129593aa3a8979abfc4e69c..dc2c22dcd8d54ae6612738e3d39746d9f2459f9d 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -306,6 +306,8 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.brain = this.makeBrain(new Dynamic(dynamicopsnbt, (Tag) dynamicopsnbt.createMap((Map) ImmutableMap.of(dynamicopsnbt.createString("memories"), (Tag) dynamicopsnbt.emptyMap()))));
     }
 
+    public boolean isLobotomized() { return false; } // KioCG
+
     protected void initAttributes() {}// Purpur
 
     public Brain<?> getBrain() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
index 7093c62be53fe99ed9880fc8ddaa07440fe4f715..577637c3e9d3eae5639129a34a7d4d90fb00ad48 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
@@ -16,6 +16,7 @@ public class FloatGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         return this.mob.isInWater() && this.mob.getFluidHeight(FluidTags.WATER) > this.mob.getFluidJumpThreshold() || this.mob.isInLava();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
index d8a2c1821fb0ec891c2f7b4e75d96a5403b4ddd1..30f0e034ae3098ad2fd4f35daac2a612120ac58c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
@@ -21,6 +21,7 @@ public class FollowParentGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.animal.isLobotomized()) return false; // KioCG
         if (this.animal.getAge() >= 0) {
             return false;
         } else {
@@ -51,6 +52,7 @@ public class FollowParentGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.animal.isLobotomized()) return false; // KioCG
         if (this.animal.getAge() >= 0) {
             return false;
         } else if (!this.parent.isAlive()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
index dc1fb94161b32a103337dccdd89977086a106a46..c8fc20fcdf7cbd0936d5177b60a2a8d3b5b9cb14 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
@@ -48,6 +48,7 @@ public class LookAtPlayerGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.mob.getRandom().nextFloat() >= this.probability) {
             return false;
         } else {
@@ -69,6 +70,7 @@ public class LookAtPlayerGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (!this.lookAt.isAlive()) {
             return false;
         } else if (this.mob.distanceToSqr(this.lookAt) > (double)(this.lookDistance * this.lookDistance)) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 744b8246a79e0119734c44ce485536ddac8b190c..b162b5ecaf3be0316970fb9625447114f2a1452f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -29,6 +29,7 @@ public class PanicGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (!this.shouldPanic()) {
             return false;
         } else {
@@ -81,6 +82,7 @@ public class PanicGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         // CraftBukkit start - introduce a temporary timeout hack until this is fixed properly
         if ((this.mob.tickCount - this.mob.lastHurtByMobTimestamp) > 100) {
             this.mob.setLastHurtByMob((LivingEntity) null);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
index d4389f006c01e9ef1bf9c6b0a6156152ef80828a..88704e619ef0b8696d2fe9e99a68e20d52e661c9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
@@ -35,6 +35,7 @@ public class RandomStrollGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.mob.isVehicle()) {
             return false;
         } else {
@@ -68,6 +69,7 @@ public class RandomStrollGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         return !this.mob.getNavigation().isDone() && !this.mob.isVehicle();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 00cf59524477ec79d4354cc403fc3e75a63b81a0..a1cc5c1524208835f9eb2cf83802415544f94ab0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -43,6 +43,7 @@ public class TemptGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.calmDown > 0) {
             --this.calmDown;
             return false;
@@ -67,6 +68,7 @@ public class TemptGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.canScare()) {
             if (this.mob.distanceToSqr((Entity) this.player) < 36.0D) {
                 if (this.player.distanceToSqr(this.px, this.py, this.pz) > 0.010000000000000002D) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index fdb08ecc19bc4a1bc93cf6b18adcea2bc5573965..0329a6a26977eb47f8124e957ecf94ec69f1e4ee 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -198,6 +198,7 @@ public abstract class PathNavigation {
     // Paper end
 
     public boolean moveTo(Entity entity, double speed) {
+        if (this.mob.isLobotomized()) return false; // KioCG
         // Paper start - Pathfinding optimizations
         if (this.pathfindFailures > 10 && this.path == null && net.minecraft.server.MinecraftServer.currentTick < this.lastFailure + 40) {
             return false;
@@ -218,6 +219,7 @@ public abstract class PathNavigation {
     }
 
     public boolean moveTo(@Nullable Path path, double speed) {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (path == null) {
             this.path = null;
             return false;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Animal.java b/src/main/java/net/minecraft/world/entity/animal/Animal.java
index 15feb1baed21b2ed3fb90d68aa9b2b97aa664b15..7a2ee84a33a82393b8e59c41a1e700278adb6061 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Animal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Animal.java
@@ -40,6 +40,7 @@ public abstract class Animal extends AgeableMob {
     @Nullable
     public UUID loveCause;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
+    protected com.kiocg.entity.Lobotomized lobotomized = new com.kiocg.entity.Lobotomized();
     public abstract int getPurpurBreedTime(); // Purpur
 
     protected Animal(EntityType<? extends Animal> type, Level world) {
@@ -75,8 +76,31 @@ public abstract class Animal extends AgeableMob {
             }
         }
 
+        this.lobotomized.checkLobotomized(this); // KioCG
     }
 
+    // KioCG start
+    @Override
+    public void travel(net.minecraft.world.phys.Vec3 vec3) {
+        if (!this.isLobotomized() || !this.passengers.isEmpty() || this.lastHurtByPlayer != null || this.lastHurtByMob != null || (this.tickCount + this.getId()) % 100 == 0) {
+            super.travel(vec3);
+        }
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        if (!this.isLobotomized() || !this.passengers.isEmpty() || this.lastHurtByPlayer != null || this.lastHurtByMob != null || net.minecraft.server.MinecraftServer.currentTick % 100 < 4) {
+            return super.isCollidable(ignoreClimbing);
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isLobotomized() {
+        return this.lobotomized.isLobotomized();
+    }
+    // KioCG end
+
     /* CraftBukkit start
     // Function disabled as it has no special function anymore after
     // setSitting is disabled.
@@ -103,6 +127,7 @@ public abstract class Animal extends AgeableMob {
         if (this.loveCause != null) {
             nbt.putUUID("LoveCause", this.loveCause);
         }
+        nbt.putBoolean("KioCG.Lobotomized", this.lobotomized.isLobotomized()); // KioCG
 
     }
 
@@ -116,6 +141,13 @@ public abstract class Animal extends AgeableMob {
         super.readAdditionalSaveData(nbt);
         this.inLove = nbt.getInt("InLove");
         this.loveCause = nbt.hasUUID("LoveCause") ? nbt.getUUID("LoveCause") : null;
+        // KioCG start
+        boolean isLobotomized = nbt.getBoolean("KioCG.Lobotomized");
+        this.lobotomized.setLobotomized(isLobotomized);
+        if (isLobotomized) {
+            this.onGround = true;
+        }
+        // KioCG end
     }
 
     public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 2677e7899aa98fc04070f5bbbc40da6117d89efa..4db8caa7b66db6110d66437a9a8290735df6d0ba 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -1107,6 +1107,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
         @Override
         public boolean canBeeUse() {
+            if (Bee.this.isLobotomized()) return false; // KioCG
             return Bee.this.hivePos != null && !Bee.this.hasRestriction() && Bee.this.wantsToEnterHive() && !this.hasReachedTarget(Bee.this.hivePos) && Bee.this.level().getBlockState(Bee.this.hivePos).is(BlockTags.BEEHIVES);
         }
 
@@ -1223,6 +1224,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
         @Override
         public boolean canBeeUse() {
+            if (Bee.this.isLobotomized()) return false; // KioCG
             return Bee.this.savedFlowerPos != null && !Bee.this.hasRestriction() && this.wantsToGoToKnownFlower() && Bee.this.isFlowerValid(Bee.this.savedFlowerPos) && !Bee.this.closerThan(Bee.this.savedFlowerPos, 2);
         }
 
@@ -1275,6 +1277,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
         @Override
         public boolean canBeeUse() {
+            if (Bee.this.isLobotomized()) return false; // KioCG
             return Bee.this.getCropsGrownSincePollination() >= 10 ? false : (Bee.this.random.nextFloat() < 0.3F ? false : Bee.this.hasNectar() && Bee.this.isHiveValid());
         }
 
@@ -1339,6 +1342,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
         @Override
         public boolean canUse() {
+            if (Bee.this.isLobotomized()) return false; // KioCG
             return Bee.this.navigation.isDone() && Bee.this.random.nextInt(10) == 0;
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 427c17635305dc0c31dd376d832e930d4fd66d8b..1f8c2277bb0bafbe890222939f8652dabe2a4326 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -140,7 +140,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }, MemoryModuleType.MEETING_POINT, (entityvillager, holder) -> {
         return holder.is(PoiTypes.MEETING);
     });
-    private boolean isLobotomized = false; public boolean isLobotomized() { return this.isLobotomized; } // Purpur
+    private com.kiocg.entity.Lobotomized lobotomized = new com.kiocg.entity.Lobotomized(); // KioCG
+    private boolean isLobotomized = false; @Override public boolean isLobotomized() { return this.lobotomized.isLobotomized(); } // Purpur // KioCG - 使用更好的检测
     private int notLobotomizedCount = 0; // Purpur
 
     public long nextGolemPanic = -1; // Pufferfish
@@ -242,6 +243,23 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         return !bottom.hasCollision && !top.hasCollision;
     }
 
+    // KioCG start
+    @Override
+    public void travel(net.minecraft.world.phys.Vec3 vec3) {
+        if (!this.isLobotomized() || !this.passengers.isEmpty() || this.lastHurtByPlayer != null || this.lastHurtByMob != null || (this.tickCount + this.getId()) % 100 == 0) {
+            super.travel(vec3);
+        }
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        if (!this.isLobotomized() || !this.passengers.isEmpty() || this.lastHurtByPlayer != null || this.lastHurtByMob != null || net.minecraft.server.MinecraftServer.currentTick % 100 < 4) {
+            return super.isCollidable(ignoreClimbing);
+        }
+        return false;
+    }
+    // KioCG end
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -345,14 +363,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         // Purpur start
         if (this.level().purpurConfig.villagerLobotomizeEnabled) {
             // treat as inactive if lobotomized
-            inactive = inactive || checkLobotomized();
+            inactive = this.lobotomized.checkLobotomized(this) || inactive; // KioCG - 使用更好的检测
         } else {
             // clean up state for API
             this.isLobotomized = false;
         }
         if (!inactive && (getRider() == null || !this.isControllable()) && this.behaviorTick++ % (this.activatedPriority * 50 + 50) < 50) // Purpur - only use brain if no rider // KioCG
             this.getBrain().tick((ServerLevel) this.level(), this); // Paper
-        else if (this.isLobotomized && shouldRestock()) restock();
+        else if (this.lobotomized.isLobotomized() && shouldRestock()) restock(); // KioCG - 使用更好的检测
         // Purpur end
         //this.level().getProfiler().pop(); // Purpur
         if (this.assignProfessionWhenSpawned) {
@@ -657,6 +675,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             nbt.putBoolean("AssignProfessionWhenSpawned", true);
         }
 
+        nbt.putBoolean("KioCG.Lobotomized", this.lobotomized.isLobotomized()); // KioCG
+
     }
 
     @Override
@@ -697,6 +717,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             this.assignProfessionWhenSpawned = nbt.getBoolean("AssignProfessionWhenSpawned");
         }
 
+        // KioCG start
+        boolean isLobotomized = nbt.getBoolean("KioCG.Lobotomized");
+        this.lobotomized.setLobotomized(isLobotomized);
+        if (isLobotomized) {
+            this.onGround = true;
+        }
+        // KioCG end
+
     }
 
     @Override
