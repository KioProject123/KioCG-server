From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sat, 28 Oct 2023 13:56:54 +0800
Subject: [PATCH] Vanilla recipe excludes model items


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 8de3c3aac56415dca3815d5b103c7501f6d33f7e..78e541c95df64fe7b505e5c51c6c3561eb519e5b 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -347,6 +347,58 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     public class KiocgConfig extends ConfigurationPart {
         public String feedbackForwardingSenderName = "MOSS";
+
+        public ModelItems modelItems;
+
+        public class ModelItems extends ConfigurationPart {
+            public VanillaRecipeInclude vanillaRecipeInclude;
+
+            public class VanillaRecipeInclude extends ConfigurationPart {
+                private java.util.Set<Integer> anvil = java.util.Set.of();
+                private java.util.Set<Integer> beacon = java.util.Set.of();
+                private java.util.Set<Integer> cartographyTable = java.util.Set.of();
+                private java.util.Set<Integer> crafting = java.util.Set.of();
+                private java.util.Set<Integer> enchantment = java.util.Set.of();
+                private java.util.Set<Integer> grindstone = java.util.Set.of();
+                private java.util.Set<Integer> loom = java.util.Set.of();
+                private java.util.Set<Integer> smithing = java.util.Set.of();
+                private java.util.Set<Integer> stonecutter = java.util.Set.of();
+                private java.util.Set<Integer> furnace = java.util.Set.of();
+                private java.util.Set<Integer> brewingStand = java.util.Set.of();
+
+                public boolean shouldCancelled(net.minecraft.world.inventory.MenuType menuType, net.minecraft.world.item.ItemStack itemStack) {
+                    if (menuType == net.minecraft.world.inventory.MenuType.ANVIL) {
+                        return !include(anvil, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.BEACON) {
+                        return !include(beacon, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.CARTOGRAPHY_TABLE) {
+                        return !include(cartographyTable, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.CRAFTING) {
+                        return !include(crafting, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.ENCHANTMENT) {
+                        return !include(enchantment, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.GRINDSTONE) {
+                        return !include(grindstone, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.LOOM) {
+                        return !include(loom, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.SMITHING) {
+                        return !include(smithing, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.STONECUTTER) {
+                        return !include(stonecutter, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.FURNACE) {
+                        return !include(furnace, itemStack);
+                    } else if (menuType == net.minecraft.world.inventory.MenuType.BREWING_STAND) {
+                        return !include(brewingStand, itemStack);
+                    }
+                    return false;
+                }
+
+                private boolean include(java.util.Set<Integer> set, net.minecraft.world.item.ItemStack itemStack) {
+                    @Nullable Integer customModelData = itemStack.getCustomModelData();
+                    return customModelData == null || set.contains(customModelData);
+                }
+            }
+        }
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
index a96df02ea2eae8eb6725ccbc797f803c1468492d..18608f979287744c1ce78856471dc97b275c9717 100644
--- a/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
+++ b/src/main/java/net/minecraft/advancements/critereon/ItemPredicate.java
@@ -36,6 +36,7 @@ public record ItemPredicate(Optional<TagKey<Item>> tag, Optional<HolderSet<Item>
     });
 
     public boolean matches(ItemStack stack) {
+        if (!stack.getItem().canBeDepleted() && stack.getCustomModelData() != null) return false; // KioCG
         if (this.tag.isPresent() && !stack.is(this.tag.get())) {
             return false;
         } else if (this.items.isPresent() && !stack.is(this.items.get())) {
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 558ad172058ef6f21364cc1a324ddc7beca3d5c3..1548271b5f7922e3d37ab5bea7ef34e2a80da97d 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -177,9 +177,10 @@ public class AnvilMenu extends ItemCombinerMenu {
 
                 if (itemstack1.isDamageableItem() && itemstack1.getItem().isValidRepairItem(itemstack, itemstack2)) {
                     k = Math.min(itemstack1.getDamageValue(), itemstack1.getMaxDamage() / 4);
-                    if (k <= 0) {
+                    if (k <= 0 || io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemstack2)) { // KioCG
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
                         this.cost.set(AnvilMenu.DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
+                        sendAllDataToRemote(); // KioCG
                         return;
                     }
 
@@ -192,9 +193,10 @@ public class AnvilMenu extends ItemCombinerMenu {
 
                     this.repairItemCountCost = i1;
                 } else {
-                    if (!flag && (!itemstack1.is(itemstack2.getItem()) || !itemstack1.isDamageableItem())) {
+                    if (!flag && (!itemstack1.is(itemstack2.getItem()) || !itemstack1.isDamageableItem() || io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemstack2))) { // KioCG
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
                         this.cost.set(AnvilMenu.DEFAULT_DENIED_COST); // CraftBukkit - use a variable for set a cost for denied item
+                        sendAllDataToRemote(); // KioCG
                         return;
                     }
 
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 25af92ec0d086160020cade97b0ddf7f6546e159..229399756bc77b8efb69878ff41d9fbf9aa133e6 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -192,6 +192,7 @@ public class BeaconMenu extends AbstractContainerMenu {
         if (this.paymentSlot.hasItem()) {
             // Paper start
             io.papermc.paper.event.player.PlayerChangeBeaconEffectEvent event = new io.papermc.paper.event.player.PlayerChangeBeaconEffectEvent((org.bukkit.entity.Player) this.player.player.getBukkitEntity(), convert(primary), convert(secondary), this.access.getLocation().getBlock());
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), this.paymentSlot.getItem())) event.setCancelled(true); // KioCG
             if (event.callEvent()) {
                 this.beaconData.set(1, BeaconMenu.encodeEffect(event.getPrimary() == null ? null : org.bukkit.craftbukkit.potion.CraftPotionEffectType.bukkitToMinecraft(event.getPrimary())));
                 this.beaconData.set(2, BeaconMenu.encodeEffect(event.getSecondary() == null ? null : org.bukkit.craftbukkit.potion.CraftPotionEffectType.bukkitToMinecraft(event.getSecondary())));
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index 09be5db3c09262e8bc56c4e20a48fe648f09237c..0672295fa75ebbc536378de26aea381e0081750a 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -154,6 +154,14 @@ public class CartographyTableMenu extends AbstractContainerMenu {
     }
 
     private void setupResultSlot(ItemStack map, ItemStack item, ItemStack oldResult) {
+        // KioCG start
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), map)
+            || io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), item)) {
+            this.resultContainer.removeItemNoUpdate(2);
+            this.broadcastChanges();
+            return;
+        }
+        // KioCG end
         this.access.execute((world, blockposition) -> {
             MapItemSavedData worldmap = MapItem.getSavedData(map, world);
 
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
index 4c8ce073094e55ea0df67fe02c0d1cc8aef76562..568d42d3dd0131ff78542fb2b14f00f37f66ae28 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
@@ -88,6 +88,13 @@ public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
 
                     if (itemstack1.isItemEnabled(world.enabledFeatures())) {
                         itemstack = itemstack1;
+                        // KioCG start
+                        if (recipeholder.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                            if (craftingInventory.hasAnyMatching(itemStack -> !itemStack.isEmpty() && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.CRAFTING, itemStack))) {
+                                itemstack = ItemStack.EMPTY;
+                            }
+                        }
+                        // KioCG end
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index d604b7ec46f08993647979ed220a84842e3fe325..e4654f8362adb1c369e164d04fcbded4305e7cdd 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -213,6 +213,12 @@ public class EnchantmentMenu extends AbstractContainerMenu {
 
                     PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(this.player, this.getBukkitView(), this.access.getLocation().getBlock(), item, offers, i);
                     event.setCancelled(!itemstack.isEnchantable());
+                    // KioCG start
+                    ItemStack itemstack1 = inventory.getItem(1);
+                    if (!itemstack1.isEmpty() && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemstack1)) {
+                        event.setCancelled(true); // KioCG
+                    }
+                    // KioCG end
                     world.getCraftServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index b1eacb9691b320a10de3420fae3632bb9d5b7ae3..fa1639ef4e87c49e4aa680799e24db557b69234e 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -213,6 +213,13 @@ public class GrindstoneMenu extends AbstractContainerMenu {
 
                 i = flag3 ? itemstack.getDamageValue() : itemstack1.getDamageValue();
                 itemstack2 = flag3 ? itemstack : itemstack1;
+                // KioCG start
+                if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemstack2)) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareGrindstoneEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
+                    this.broadcastChanges();
+                    return;
+                }
+                // KioCG end
             }
             org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareGrindstoneEvent(this.getBukkitView(), this.removeNonCurses(itemstack2, i, b0)); // CraftBukkit
         } else {
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 146006af2af0881de199a0607a1b8f33de4c3f4f..e507461477e05f83006441c80d3778dbc3102421 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -204,6 +204,7 @@ public class LoomMenu extends AbstractContainerMenu {
             // Paper end
             return true;
         } else {
+            sendAllDataToRemote(); // KioCG - 防止客户端不同步
             return false;
         }
     }
@@ -214,7 +215,7 @@ public class LoomMenu extends AbstractContainerMenu {
         } else {
             Item item = stack.getItem();
 
-            if (item instanceof BannerPatternItem) {
+            if (item instanceof BannerPatternItem && !io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), stack)) { // KioCG
                 BannerPatternItem itembannerpattern = (BannerPatternItem) item;
 
                 return (List) BuiltInRegistries.BANNER_PATTERN.getTag(itembannerpattern.getBannerPattern()).map(ImmutableList::copyOf).orElse(ImmutableList.of());
@@ -363,6 +364,13 @@ public class LoomMenu extends AbstractContainerMenu {
         ItemStack itemstack = this.bannerSlot.getItem();
         ItemStack itemstack1 = this.dyeSlot.getItem();
         ItemStack itemstack2 = ItemStack.EMPTY;
+        // KioCG start
+        if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemstack)
+            || io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemstack1)) {
+            this.resultSlot.set(ItemStack.EMPTY);
+            return;
+        }
+        // KioCG end
 
         if (!itemstack.isEmpty() && !itemstack1.isEmpty()) {
             itemstack2 = itemstack.copyWithCount(1);
diff --git a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
index 857f65be8c4d9ec3a0586017b3f3e8e35cb78b97..5270f97d6f4f627a840e461c7e1f6a84397ab1e3 100644
--- a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
@@ -109,6 +109,13 @@ public class SmithingMenu extends ItemCombinerMenu {
             if (itemstack.isItemEnabled(this.level.enabledFeatures())) {
                 this.selectedRecipe = recipeholder;
                 this.resultSlots.setRecipeUsed(recipeholder);
+                // KioCG start
+                if (recipeholder.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                    if (this.inputSlots.hasAnyMatching(itemStack -> !itemStack.isEmpty() && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), itemStack))) {
+                        itemstack = ItemStack.EMPTY;
+                    }
+                }
+                // KioCG end
                 // CraftBukkit start
                 org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareSmithingEvent(this.getBukkitView(), itemstack);
                 // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index f8129dcdcae12ed66ec58e8c749fa88ec3cd85d8..0a96c13ad111cb5d9ae35b2f1c0d817df01981b0 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -167,6 +167,13 @@ public class StonecutterMenu extends AbstractContainerMenu {
             this.selectedRecipeIndex.checkAndClearUpdateFlag(); // mark as changed
             if (this.isValidRecipeIndex(id)) {
                 io.papermc.paper.event.player.PlayerStonecutterRecipeSelectEvent event = new io.papermc.paper.event.player.PlayerStonecutterRecipeSelectEvent((Player) player.getBukkitEntity(), (org.bukkit.inventory.StonecutterInventory) getBukkitView().getTopInventory(), (org.bukkit.inventory.StonecuttingRecipe) this.getRecipes().get(id).toBukkitRecipe());
+                // KioCG start
+                if (event.getStonecuttingRecipe().getKey().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                    if (this.inputSlot.hasItem() && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(getType(), this.inputSlot.getItem())) {
+                        event.setCancelled(true);
+                    }
+                }
+                // KioCG end
                 if (!event.callEvent()) {
                     ((Player) player.getBukkitEntity()).updateInventory();
                     return false;
@@ -198,7 +205,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
     public void slotsChanged(Container inventory) {
         ItemStack itemstack = this.inputSlot.getItem();
 
-        if (!itemstack.is(this.input.getItem())) {
+        if (!ItemStack.isSameItemSameTags(itemstack, this.input)) { // KioCG - 更准确的判断
             this.input = itemstack.copy();
             this.setupRecipeList(inventory, itemstack);
         }
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index fc481f26368f4d823379921573a05ac5b91f39e6..5f7f64478819b37b8413b305e355a1c4e587f240 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -889,6 +889,16 @@ public final class ItemStack {
         return this.tag != null ? this.tag.getList("Enchantments", 10) : new ListTag();
     }
 
+    // KioCG start
+    @Nullable
+    public Integer getCustomModelData() {
+        if (this.tag != null && this.tag.contains("CustomModelData")) {
+            return this.tag.getInt("CustomModelData");
+        }
+        return null;
+    }
+    // KioCG end
+
     // Paper start - (this is just a good no conflict location)
     public org.bukkit.inventory.ItemStack asBukkitMirror() {
         return CraftItemStack.asCraftMirror(this);
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index e03ce53b93d1b9366f2a7f14f341750a163ae0db..6946978dd59f5abdf74610d81bf2f542b7a2c4af 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -252,6 +252,7 @@ public class MerchantOffer {
                 itemstack2.setDamageValue(itemstack2.getDamageValue());
             }
 
+            if (!sample.hasTag() && given.getCustomModelData() != null) return false; // KioCG
             return ItemStack.isSameItem(itemstack2, sample) && (!sample.hasTag() || itemstack2.hasTag() && NbtUtils.compareNbt(sample.getTag(), itemstack2.getTag(), false));
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 754de5aee5326ddf2b2a9879af26a678a500a498..29973c19ad670508655b13ac5a98b1a0599dd9b0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -382,6 +382,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
 
                 FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(world, pos), fuel, blockEntity.getBurnDuration(itemstack));
+                if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.FURNACE, itemstack)) furnaceBurnEvent.setCancelled(true); // KioCG
                 world.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
 
                 if (furnaceBurnEvent.isCancelled()) {
@@ -450,6 +451,13 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     private static boolean canBurn(RegistryAccess registryManager, @Nullable RecipeHolder<?> recipe, NonNullList<ItemStack> slots, int count) {
         if (!((ItemStack) slots.get(0)).isEmpty() && recipe != null) {
+            // KioCG start
+            if (recipe.id().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.FURNACE, slots.get(0))) {
+                    return false;
+                }
+            }
+            // KioCG end
             ItemStack itemstack = recipe.value().getResultItem(registryManager);
 
             if (itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 7af18eac34f3eb424180f8603b4ccc824b0b3480..ae887c60f7ef962ce6cef038132c5c7a9223377d 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -156,6 +156,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
             // CraftBukkit start
             BrewingStandFuelEvent event = new BrewingStandFuelEvent(CraftBlock.at(world, pos), CraftItemStack.asCraftMirror(itemstack), 20);
+            if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.BREWING_STAND, itemstack)) event.setCancelled(true); // KioCG
             world.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
@@ -241,10 +242,12 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         } else if (!PotionBrewing.isIngredient(itemstack)) {
             return false;
         } else {
+            if (!PotionBrewing.isCustomIngredient(itemstack) && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.BREWING_STAND, itemstack)) return false; // KioCG
             for (int i = 0; i < 3; ++i) {
                 ItemStack itemstack1 = (ItemStack) slots.get(i);
 
                 if (!itemstack1.isEmpty() && PotionBrewing.hasMix(itemstack1, itemstack)) {
+                    if (!PotionBrewing.isCustomInput(itemstack1) && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.BREWING_STAND, itemstack1)) break; // KioCG
                     return true;
                 }
             }
@@ -260,7 +263,11 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         List<org.bukkit.inventory.ItemStack> brewResults = new ArrayList<>(3);
 
         for (int i = 0; i < 3; ++i) {
-            brewResults.add(i, CraftItemStack.asCraftMirror(PotionBrewing.mix(itemstack, (ItemStack) nonnulllist.get(i))));
+            // KioCG start
+            ItemStack itemstack1 = (ItemStack) nonnulllist.get(i);
+            boolean isModelItem = !itemstack1.isEmpty() && !PotionBrewing.isCustomInput(itemstack1) && io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.BREWING_STAND, itemstack1);
+            brewResults.add(i, CraftItemStack.asCraftMirror(isModelItem ? itemstack1 : PotionBrewing.mix(itemstack, itemstack1)));
+            // KioCG end
         }
 
         if (owner != null) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index ca86ee6ffc185a011fa9a01c6eca6812e3f15c5a..d239b7c87a065917fefaf57e22a18b55bc419f48 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -79,9 +79,23 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                         org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
 
                         BlockCookEvent blockCookEvent = new BlockCookEvent(CraftBlock.at(world, pos), source, result, (org.bukkit.inventory.CookingRecipe<?>) recipeHolderOptional.map(RecipeHolder::toBukkitRecipe).orElse(null)); // Paper
+                        // KioCG start
+                        boolean resetCookingProgress = false;
+                        if (blockCookEvent.getRecipe() != null && blockCookEvent.getRecipe().getKey().getNamespace().equals(org.bukkit.NamespacedKey.MINECRAFT)) {
+                            if (io.papermc.paper.configuration.GlobalConfiguration.get().kiocgConfig.modelItems.vanillaRecipeInclude.shouldCancelled(net.minecraft.world.inventory.MenuType.FURNACE, itemstack)) {
+                                blockCookEvent.setCancelled(true);
+                                resetCookingProgress = true;
+                            }
+                        }
+                        // KioCG end
                         world.getCraftServer().getPluginManager().callEvent(blockCookEvent);
 
                         if (blockCookEvent.isCancelled()) {
+                            // KioCG start
+                            if (resetCookingProgress) {
+                                campfire.cookingProgress[i] = 0;
+                            }
+                            // KioCG end
                             return;
                         }
 
