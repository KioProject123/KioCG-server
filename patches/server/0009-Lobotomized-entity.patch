From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Sat, 10 Dec 2022 03:02:01 +0800
Subject: [PATCH] Lobotomized entity


diff --git a/src/main/java/com/kiocg/entity/Lobotomized.java b/src/main/java/com/kiocg/entity/Lobotomized.java
new file mode 100644
index 0000000000000000000000000000000000000000..b776d7fa7345b2ac5918aafdbb0f0b62126b978e
--- /dev/null
+++ b/src/main/java/com/kiocg/entity/Lobotomized.java
@@ -0,0 +1,53 @@
+package com.kiocg.entity;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.pathfinder.PathComputationType;
+
+public class Lobotomized {
+    private final int brainTickOffset;
+    private boolean isLobotomized = false;
+
+    public Lobotomized(LivingEntity livingEntity) {
+        this.brainTickOffset = livingEntity.getRandom().nextInt(100);
+    }
+
+    public boolean isLobotomized() {
+        return this.isLobotomized;
+    }
+
+    public void setLobotomized(boolean b) {
+        this.isLobotomized = b;
+    }
+
+    public boolean checkLobotomized(LivingEntity livingEntity) {
+        int interval = livingEntity.getLevel().purpurConfig.villagerLobotomizeCheckInterval;
+        if ((livingEntity.getLevel().getGameTime() + brainTickOffset) % interval == 0) {
+            // offset Y for short blocks like dirt_path/farmland
+            // 扩展到半砖高度 (希望不会出问题!)
+            this.isLobotomized = livingEntity.isOnGround() && !canTravelFrom(new BlockPos(livingEntity.getX(), livingEntity.getY() + 0.5D, livingEntity.getZ()), livingEntity.getLevel(), livingEntity.getBbHeight() <= 1.0F);
+        }
+        return this.isLobotomized;
+    }
+
+    private boolean canTravelFrom(BlockPos pos, Level level, boolean ignoreTop) {
+        return canTravelTo(pos.east(), level, ignoreTop) || canTravelTo(pos.west(), level, ignoreTop) || canTravelTo(pos.north(), level, ignoreTop) || canTravelTo(pos.south(), level, ignoreTop);
+    }
+
+    private boolean canTravelTo(BlockPos pos, Level level, boolean ignoreTop) {
+        net.minecraft.world.level.block.state.BlockState state = level.getBlockStateIfLoaded(pos);
+        if (state == null) {
+            // chunk not loaded
+            return false;
+        }
+
+        // 优化单格生物的检测
+        if (ignoreTop) {
+            return state.isPathfindable(level, pos, PathComputationType.LAND);
+        }
+
+        // only if both blocks have no collision
+        return state.isPathfindable(level, pos, PathComputationType.LAND) && level.getBlockState(pos.above()).isPathfindable(level, pos, PathComputationType.LAND);
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 094afd5636590608c8ec31c9fec97614dfef60db..29888180f6c271d810219bc594dd3a74dc5d6803 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -308,6 +308,8 @@ public abstract class LivingEntity extends Entity {
         this.brain = this.makeBrain(new Dynamic(dynamicopsnbt, (Tag) dynamicopsnbt.createMap((Map) ImmutableMap.of(dynamicopsnbt.createString("memories"), (Tag) dynamicopsnbt.emptyMap()))));
     }
 
+    public boolean isLobotomized() { return false; } // KioCG
+
     protected void initAttributes() {}// Purpur
 
     public Brain<?> getBrain() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
index 7093c62be53fe99ed9880fc8ddaa07440fe4f715..577637c3e9d3eae5639129a34a7d4d90fb00ad48 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FloatGoal.java
@@ -16,6 +16,7 @@ public class FloatGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         return this.mob.isInWater() && this.mob.getFluidHeight(FluidTags.WATER) > this.mob.getFluidJumpThreshold() || this.mob.isInLava();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
index a668d5263586f955a5656ac66bcc7fe8cc51fe00..9b1c7c1a89aecde89ecc13d444ca3a3edf41d84d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
@@ -21,6 +21,7 @@ public class FollowParentGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.animal.isLobotomized()) return false; // KioCG
         if (this.animal.getAge() >= 0) {
             return false;
         } else {
@@ -51,6 +52,7 @@ public class FollowParentGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.animal.isLobotomized()) return false; // KioCG
         if (this.animal.getAge() >= 0) {
             return false;
         } else if (!this.parent.isAlive()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
index 8b189d7587303263efa1790066e5a83edd45f9d7..27abc21dd433cd5d712586ea20249ff3a04acd54 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
@@ -48,6 +48,7 @@ public class LookAtPlayerGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.mob.getRandom().nextFloat() >= this.probability) {
             return false;
         } else {
@@ -69,6 +70,7 @@ public class LookAtPlayerGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (!this.lookAt.isAlive()) {
             return false;
         } else if (this.mob.distanceToSqr(this.lookAt) > (double)(this.lookDistance * this.lookDistance)) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 268b7457c2a93af6d36c1c5f623c5856f94a7af1..f0373b95dcb8e56f73de6c049a24721498f371f1 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -29,6 +29,7 @@ public class PanicGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (!this.shouldPanic()) {
             return false;
         } else {
@@ -81,6 +82,7 @@ public class PanicGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         // CraftBukkit start - introduce a temporary timeout hack until this is fixed properly
         if ((this.mob.tickCount - this.mob.lastHurtByMobTimestamp) > 100) {
             this.mob.setLastHurtByMob((LivingEntity) null);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
index d4389f006c01e9ef1bf9c6b0a6156152ef80828a..88704e619ef0b8696d2fe9e99a68e20d52e661c9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
@@ -35,6 +35,7 @@ public class RandomStrollGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.mob.isVehicle()) {
             return false;
         } else {
@@ -68,6 +69,7 @@ public class RandomStrollGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         return !this.mob.getNavigation().isDone() && !this.mob.isVehicle();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 2cbc9adc8e417def48be03d08174a5833068ec65..e60176ac8eb5e8b772331e51d9f4563be8017b7d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -43,6 +43,7 @@ public class TemptGoal extends Goal {
 
     @Override
     public boolean canUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.calmDown > 0) {
             --this.calmDown;
             return false;
@@ -67,6 +68,7 @@ public class TemptGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
+        if (this.mob.isLobotomized()) return false; // KioCG
         if (this.canScare()) {
             if (this.mob.distanceToSqr((Entity) this.player) < 36.0D) {
                 if (this.player.distanceToSqr(this.px, this.py, this.pz) > 0.010000000000000002D) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Animal.java b/src/main/java/net/minecraft/world/entity/animal/Animal.java
index 2ac88f06ebb79e515cd9934ac1e3e2c8003d9e3c..a1c5c9a9f0101a12c91e3a25eb7ef2f7f7fb56a7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Animal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Animal.java
@@ -39,6 +39,7 @@ public abstract class Animal extends AgeableMob {
     @Nullable
     public UUID loveCause;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
+    protected com.kiocg.entity.Lobotomized lobotomized = new com.kiocg.entity.Lobotomized(this);
     public abstract int getPurpurBreedTime(); // Purpur
 
     protected Animal(EntityType<? extends Animal> type, Level world) {
@@ -74,8 +75,31 @@ public abstract class Animal extends AgeableMob {
             }
         }
 
+        this.lobotomized.checkLobotomized(this); // KioCG
     }
 
+    // KioCG start
+    @Override
+    public void travel(net.minecraft.world.phys.Vec3 vec3) {
+        if (!this.isLobotomized() || net.minecraft.server.MinecraftServer.currentTick % 100 == 0) {
+            super.travel(vec3);
+        }
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        if (!this.isLobotomized() || net.minecraft.server.MinecraftServer.currentTick % 20 == 0) {
+            return super.isCollidable(ignoreClimbing);
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isLobotomized() {
+        return this.lobotomized.isLobotomized();
+    }
+    // KioCG stop
+
     /* CraftBukkit start
     // Function disabled as it has no special function anymore after
     // setSitting is disabled.
@@ -102,6 +126,7 @@ public abstract class Animal extends AgeableMob {
         if (this.loveCause != null) {
             nbt.putUUID("LoveCause", this.loveCause);
         }
+        nbt.putBoolean("KioCG.Lobotomized", this.lobotomized.isLobotomized()); // KioCG
 
     }
 
@@ -115,6 +140,13 @@ public abstract class Animal extends AgeableMob {
         super.readAdditionalSaveData(nbt);
         this.inLove = nbt.getInt("InLove");
         this.loveCause = nbt.hasUUID("LoveCause") ? nbt.getUUID("LoveCause") : null;
+        // KioCG start
+        boolean isLobotomized = nbt.getBoolean("KioCG.Lobotomized");
+        this.lobotomized.setLobotomized(isLobotomized);
+        if (isLobotomized) {
+            this.onGround = true;
+        }
+        // KioCG end
     }
 
     public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 832469e39901d9ec666ddaf3aff77419f6195b1c..fd41ecb96ab33c88c2e2767a54dd576454fa1c93 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -139,8 +139,9 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }, MemoryModuleType.MEETING_POINT, (entityvillager, holder) -> {
         return holder.is(PoiTypes.MEETING);
     });
-    private boolean isLobotomized = false; public boolean isLobotomized() { return this.isLobotomized; } // Purpur
+    private boolean isLobotomized = false; @Override public boolean isLobotomized() { return this.lobotomized.isLobotomized(); } // Purpur // KioCG - 使用更好的检测
     private int notLobotomizedCount = 0; // Purpur
+    private com.kiocg.entity.Lobotomized lobotomized = new com.kiocg.entity.Lobotomized(this); // KioCG
 
     public long nextGolemPanic = -1; // Pufferfish
 
@@ -241,6 +242,23 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Purpur end
 
+    // KioCG start
+    @Override
+    public void travel(net.minecraft.world.phys.Vec3 vec3) {
+        if (!this.isLobotomized() || net.minecraft.server.MinecraftServer.currentTick % 100 == 0) {
+            super.travel(vec3);
+        }
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        if (!this.isLobotomized() || net.minecraft.server.MinecraftServer.currentTick % 20 == 0) {
+            return super.isCollidable(ignoreClimbing);
+        }
+        return false;
+    }
+    // KioCG stop
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -339,7 +357,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         // Purpur start
         if (this.level.purpurConfig.villagerLobotomizeEnabled) {
             // treat as inactive if lobotomized
-            inactive = inactive || checkLobotomized();
+            inactive = this.lobotomized.checkLobotomized(this) || inactive; // KioCG - 使用更好的检测
         } else {
             // clean up state for API
             this.isLobotomized = false;
@@ -352,7 +370,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
          }
         // Pufferfish end
         // Purpur start
-        else if (this.isLobotomized && shouldRestock()) {
+        else if (this.lobotomized.isLobotomized() && shouldRestock()) { // KioCG - 使用更好的检测
             // make sure we restock if needed when lobotomized
             restock();
         }
@@ -647,6 +665,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.assignProfessionWhenSpawned) {
             nbt.putBoolean("AssignProfessionWhenSpawned", true);
         }
+        nbt.putBoolean("KioCG.Lobotomized", this.lobotomized.isLobotomized()); // KioCG
 
     }
 
@@ -688,6 +707,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             this.assignProfessionWhenSpawned = nbt.getBoolean("AssignProfessionWhenSpawned");
         }
 
+        // KioCG start
+        boolean isLobotomized = nbt.getBoolean("KioCG.Lobotomized");
+        this.lobotomized.setLobotomized(isLobotomized);
+        if (isLobotomized) {
+            this.onGround = true;
+        }
+        // KioCG end
+
     }
 
     @Override
