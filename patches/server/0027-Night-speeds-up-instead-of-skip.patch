From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Tue, 28 Nov 2023 07:17:32 +0800
Subject: [PATCH] Night speeds up instead of skip


diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 27b3e0be3eab20e8bb5caa882ba3e4e134ced54f..61e8ce3bfa11644a8760db58f2172d6c5e15cf5f 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -568,6 +568,7 @@ public class WorldConfiguration extends ConfigurationPart {
 
         public boolean hopperPullsLockedContainer = true;
         public boolean hopperPullsEntityOwnedItem = true;
+        public boolean nightSpeedsUpInsteadOfSkip = false;
     }
     // KioCG end
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a7b995eff299f22f7e8f32c08fbbb98bec5008fa..f2d01091abc6a3ade59bb8d064b4c7760036a5d4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1724,7 +1724,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             long worldTime = level.getGameTime();
             final ClientboundSetTimePacket worldPacket = new ClientboundSetTimePacket(worldTime, dayTime, doDaylight);
             for (Player entityhuman : level.players()) {
-                if (!(entityhuman instanceof ServerPlayer) || (!level.isForceTime() && (tickCount + entityhuman.getId()) % 20 != 0)) { // Purpur
+                if (!(entityhuman instanceof ServerPlayer) || (!level.isForceTime() && !level.isForceTimeNight() && (tickCount + entityhuman.getId()) % 20 != 0)) { // Purpur // KioCG
                     continue;
                 }
                 ServerPlayer entityplayer = (ServerPlayer) entityhuman;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index a48ae09309f8152b65db3d42dcd58b9c73bec611..12e275dd9b5f9dca05525b98a890c0494a1d069e 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -218,6 +218,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private final boolean tickTime;
     private double preciseTime; // Purpur
     private boolean forceTime; // Purpur
+    private boolean forceTimeNight; public boolean isForceTimeNight() { return this.forceTimeNight; } // KioCG
     private final RandomSequences randomSequences;
     public long lastMidTickExecuteFailure; // Paper - execute chunk tasks mid tick
 
@@ -841,17 +842,29 @@ public class ServerLevel extends Level implements WorldGenLevel {
         int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
         long j;
 
+        this.forceTimeNight = false; // KioCG
         if (this.purpurConfig.playersSkipNight && this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+            boolean skipNight = true; // KioCG
             // CraftBukkit start
             j = this.levelData.getDayTime() + 24000L;
             TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
             if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
+                // KioCG start
+                if (this.paperConfig().kiocgConfig.nightSpeedsUpInsteadOfSkip) {
+                    int speedUp = 9 + (this.sleepStatus.amountSleeping() - this.sleepStatus.sleepersNeeded(i)) * 2;
+                    if (!(skipNight = speedUp >= event.getSkipAmount())) {
+                        event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.CUSTOM, speedUp);
+                    }
+                }
+                // KioCG end
                 this.getCraftServer().getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                    this.forceTimeNight = true; // KioCG - 强制同步时间
                 }
             }
 
+            if (skipNight) { // KioCG
             if (!event.isCancelled()) {
                 this.wakeUpAllPlayers();
             }
@@ -859,6 +872,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
                 this.resetWeatherCycle();
             }
+            } // KioCG
         }
 
         this.updateSkyBrightness();
diff --git a/src/main/java/net/minecraft/server/players/SleepStatus.java b/src/main/java/net/minecraft/server/players/SleepStatus.java
index caa8a69bde0c212c36dd990a67836ac2f95548c0..ac09bf01c49e4a7321c08dbf4c7d9637acd9656e 100644
--- a/src/main/java/net/minecraft/server/players/SleepStatus.java
+++ b/src/main/java/net/minecraft/server/players/SleepStatus.java
@@ -51,6 +51,7 @@ public class SleepStatus {
             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
             if (!entityplayer.isSpectator()) {
+                if (!entityplayer.level().purpurConfig.idleTimeoutSleepingCountBypass || !entityplayer.isAfk()) // KioCG
                 ++this.activePlayers;
                 if ((entityplayer.isSleeping() || entityplayer.fauxSleeping) || (entityplayer.level().purpurConfig.idleTimeoutCountAsSleeping && entityplayer.isAfk())) { // CraftBukkit // Purpur
                     ++this.sleepingPlayers;
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index bbf371428e343cfad0ae118c387fd2342541fe53..d5e29e083c8e4294df821a55e4b66af337988a02 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -421,6 +421,7 @@ public class PurpurWorldConfig {
     public boolean idleTimeoutKick = true;
     public boolean idleTimeoutTickNearbyEntities = true;
     public boolean idleTimeoutCountAsSleeping = false;
+    public boolean idleTimeoutSleepingCountBypass = false; // KioCG
     public boolean idleTimeoutUpdateTabList = false;
     public boolean idleTimeoutTargetPlayer = true;
     public String playerDeathExpDropEquation = "expLevel * 7";
@@ -449,6 +450,7 @@ public class PurpurWorldConfig {
         idleTimeoutKick = System.getenv("PURPUR_FORCE_IDLE_KICK") == null ? getBoolean("gameplay-mechanics.player.idle-timeout.kick-if-idle", idleTimeoutKick) : Boolean.parseBoolean(System.getenv("PURPUR_FORCE_IDLE_KICK"));
         idleTimeoutTickNearbyEntities = getBoolean("gameplay-mechanics.player.idle-timeout.tick-nearby-entities", idleTimeoutTickNearbyEntities);
         idleTimeoutCountAsSleeping = getBoolean("gameplay-mechanics.player.idle-timeout.count-as-sleeping", idleTimeoutCountAsSleeping);
+        idleTimeoutSleepingCountBypass = getBoolean("gameplay-mechanics.player.idle-timeout.sleeping-count-bypass", idleTimeoutSleepingCountBypass); // KioCG
         idleTimeoutUpdateTabList = getBoolean("gameplay-mechanics.player.idle-timeout.update-tab-list", idleTimeoutUpdateTabList);
         idleTimeoutTargetPlayer = getBoolean("gameplay-mechanics.player.idle-timeout.mobs-target", idleTimeoutTargetPlayer);
         playerDeathExpDropEquation = getString("gameplay-mechanics.player.exp-dropped-on-death.equation", playerDeathExpDropEquation);
