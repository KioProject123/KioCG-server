From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 16 Jun 2023 05:23:19 +0800
Subject: [PATCH] Optimize trigger advancements


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index b6e65cff53a3917a651fb727a0cebc48fb229341..3083f211db779fac990e82c4bccd17624bb7b7e6 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -718,6 +718,7 @@ public class ServerPlayer extends Player {
 
     @Override
     protected void onInsideBlock(BlockState state) {
+        if (!state.isAir()) // KioCG
         CriteriaTriggers.ENTER_BLOCK.trigger(this, state);
     }
 
@@ -742,7 +743,7 @@ public class ServerPlayer extends Player {
 
         // Paper start - Configurable container update tick rate
         if (--containerUpdateDelay <= 0) {
-            this.containerMenu.broadcastChanges();
+            this.containerMenu.broadcastChanges(false); // KioCG
             containerUpdateDelay = this.level().paperConfig().tickRates.containerUpdate;
         }
         // Paper end
@@ -765,6 +766,7 @@ public class ServerPlayer extends Player {
             }
         }
 
+        if (this.tickCount % (20 * 60) == 0) // KioCG
         CriteriaTriggers.TICK.trigger(this);
         if (this.levitationStartPos != null) {
             CriteriaTriggers.LEVITATION.trigger(this, this.levitationStartPos, this.tickCount - this.levitationStartTime);
@@ -895,7 +897,7 @@ public class ServerPlayer extends Player {
                 this.connection.send(new ClientboundSetExperiencePacket(this.experienceProgress, this.totalExperience, this.experienceLevel));
             }
 
-            if (this.tickCount % 20 == 0) {
+            if (this.tickCount % (20 * 3) == 0) { // KioCG
                 CriteriaTriggers.LOCATION.trigger(this);
             }
 
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 1af23da6b3ccb4759e46e37cfa2ca85cf78f3ec2..867c1985ac1a9da8f4580d914e13401b640f078b 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -233,14 +233,32 @@ public abstract class AbstractContainerMenu {
     }
 
     public void broadcastChanges() {
+    // KioCG start
+        this.broadcastChanges(true);
+    }
+
+    private int triggerTick = -1;
+
+    public void broadcastChanges(boolean triggerSlotListeners) {
+    // KioCG end
         int i;
 
+        // KioCG start - 每刻只触发一次
+        if (triggerSlotListeners) {
+            triggerSlotListeners = false;
+            if (net.minecraft.server.MinecraftServer.currentTick != triggerTick) {
+                triggerTick = net.minecraft.server.MinecraftServer.currentTick;
+                triggerSlotListeners = true;
+            }
+        }
+        // KioCG end - 每刻只触发一次
         for (i = 0; i < this.slots.size(); ++i) {
             ItemStack itemstack = ((Slot) this.slots.get(i)).getItem();
 
             Objects.requireNonNull(itemstack);
             Supplier<ItemStack> supplier = Suppliers.memoize(itemstack::copy);
 
+            if (triggerSlotListeners) // KioCG
             this.triggerSlotListeners(i, itemstack, supplier);
             this.synchronizeSlotToRemote(i, itemstack, supplier);
         }
@@ -263,6 +281,14 @@ public abstract class AbstractContainerMenu {
     public void broadcastFullState() {
         int i;
 
+        // KioCG start - 每刻只触发一次
+        boolean triggerSlotListeners = false;
+        if (net.minecraft.server.MinecraftServer.currentTick != triggerTick) {
+            triggerTick = net.minecraft.server.MinecraftServer.currentTick;
+            triggerSlotListeners = true;
+        }
+        if (triggerSlotListeners)
+        // KioCG end - 每刻只触发一次
         for (i = 0; i < this.slots.size(); ++i) {
             ItemStack itemstack = ((Slot) this.slots.get(i)).getItem();
 
