From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Fri, 17 Nov 2023 18:24:02 +0800
Subject: [PATCH] Support FoodFlight plugin


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 17bb21e1df6c8601bcdbd28a14fc891895d39bef..b735fd93bd6033043ad0c3eff19c63cab530aaaf 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -901,6 +901,16 @@ public class ServerPlayer extends Player {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
 
+            // KioCG start - 饥饿飞行功能: 判断是否在任意结构内
+            if (this.tickCount % 20 == 0 && this.serverLevel().isLoaded(this.blockPosition())) {
+                if (this.serverLevel().structureManager().hasAnyStructureAtExact(this.blockPosition())) {
+                    this.addTag("KioCG_inStructure");
+                } else {
+                    this.removeTag("KioCG_inStructure");
+                }
+            }
+            // KioCG end - 饥饿飞行功能: 判断是否在任意结构内
+
             // CraftBukkit start - initialize oldLevel, fire PlayerLevelChangeEvent, and tick client-sided world border
             if (this.oldLevel == -1) {
                 this.oldLevel = this.experienceLevel;
diff --git a/src/main/java/net/minecraft/world/level/StructureManager.java b/src/main/java/net/minecraft/world/level/StructureManager.java
index b59581b92aed0bc1b09008c695b0b112c3e65743..155170580c0729d5affbd97ef43b90452eec63f4 100644
--- a/src/main/java/net/minecraft/world/level/StructureManager.java
+++ b/src/main/java/net/minecraft/world/level/StructureManager.java
@@ -158,6 +158,33 @@ public class StructureManager {
         return this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_REFERENCES).hasAnyStructureReferences();
     }
 
+    // KioCG start
+    public boolean hasAnyStructureAtExact(BlockPos pos) {
+        net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox = new net.minecraft.world.level.levelgen.structure.BoundingBox
+            (pos.getX() - 4, pos.getY() - 4, pos.getZ() - 4, pos.getX() + 4, pos.getY() + 4, pos.getZ() + 4);
+        for (Map.Entry<Structure, LongSet> entry : this.getAllStructuresAt(pos).entrySet()) {
+            java.util.concurrent.atomic.AtomicBoolean hasPieceAt = new java.util.concurrent.atomic.AtomicBoolean(false);
+            this.fillStartsForStructure(entry.getKey(), entry.getValue(), structureStart -> {
+                if (this.structureHasPieceIntersects(boundingBox, structureStart)) {
+                    hasPieceAt.set(true);
+                }
+            });
+            if (hasPieceAt.get()) return true;
+        }
+        return false;
+    }
+
+    public boolean structureHasPieceIntersects(net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox, StructureStart structureStart) {
+        for (StructurePiece structurePiece : structureStart.getPieces()) {
+            if (structurePiece.getBoundingBox().intersects(boundingBox)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+    // KioCG end
+
     public Map<Structure, LongSet> getAllStructuresAt(BlockPos pos) {
         SectionPos sectionPos = SectionPos.of(pos);
         return this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_REFERENCES).getAllReferences();
