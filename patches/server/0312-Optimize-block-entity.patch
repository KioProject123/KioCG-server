From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joket_abc <15005771700@qq.com>
Date: Thu, 24 Nov 2022 21:36:11 +0800
Subject: [PATCH] Optimize block entity


diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index 551bacade8642e6aad17120d8a901bcc293f2eb2..59bb0d62de3321f876e1c9fb984e467f9b4e51c7 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -281,7 +281,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
+        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : null); // KioCG - 优化未燃烧的运算
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 5ae858b81e6f9903b7296077cf497f62bb8d6995..273bbd1e8c34b0553492156ab32deb396a011bec 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -84,6 +84,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     public final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
     private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
     public final RecipeType<? extends AbstractCookingRecipe> recipeType; // Paper
+    private boolean shouldTick = true; // KioCG
 
     protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType) {
         super(blockEntityType, pos, state);
@@ -332,6 +333,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, AbstractFurnaceBlockEntity blockEntity) {
+        if (!blockEntity.isLit() && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         boolean flag = blockEntity.isLit();
         boolean flag1 = false;
 
@@ -361,6 +363,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         if (!blockEntity.isLit() && (!flag3 || !flag2)) {
             if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
                 blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, (int) 0, blockEntity.cookingTotalTime);
+                blockEntity.shouldTick = true; // KioCG
             }
         } else {
             Recipe irecipe;
@@ -415,6 +418,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 }
                 // CraftBukkit end
 
+                blockEntity.shouldTick = true; // KioCG
                 ++blockEntity.cookingProgress;
                 if (blockEntity.cookingProgress >= blockEntity.cookingTotalTime) { // Paper - cook speed multiplier API
                     blockEntity.cookingProgress = 0;
@@ -599,6 +603,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             this.setChanged();
         }
 
+        this.shouldTick = true; // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 55006724ccec9f3de828ec18693728e9741ff65f..f8fcfc7611b9bc57d007acadad3e6670dab49571 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -57,6 +57,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     private int lastTick = MinecraftServer.currentTick;
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
     private int maxStack = 64;
+    private boolean shouldTick = true; // KioCG
 
     public void onOpen(CraftHumanEntity who) {
         this.transaction.add(who);
@@ -147,6 +148,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, BrewingStandBlockEntity blockEntity) {
+        if (blockEntity.brewTime <= 0 && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
 
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
@@ -175,6 +177,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         blockEntity.lastTick = MinecraftServer.currentTick;
 
         if (flag1) {
+            blockEntity.shouldTick = true; // KioCG
             blockEntity.brewTime -= elapsedTicks;
             boolean flag2 = blockEntity.brewTime <= 0; // == -> <=
             // CraftBukkit end
@@ -326,6 +329,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             this.items.set(slot, stack);
         }
 
+        this.shouldTick = true; // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 830326496e2f961682daadc7a7859247042b4cdd..281d9b1d493e6e53653cff10f05393852d967f06 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -120,6 +120,24 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
     }
 
+    // KioCG start
+    public static void cooldownImmediately(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
+        boolean flag = false;
+
+        for (int i = 0; i < campfire.items.size(); ++i) {
+            if (campfire.cookingProgress[i] > 0) {
+                flag = true;
+                campfire.cookingProgress[i] = (int) 0;
+            }
+        }
+
+        if (flag) {
+            setChanged(world, pos, state);
+        }
+
+    }
+    // KioCG stop
+
     public static void particleTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
         RandomSource randomsource = world.random;
         int i;
@@ -243,6 +261,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public void dowse() {
         if (this.level != null) {
             this.markUpdated();
+            this.cooldownImmediately(this.getLevel(), this.getBlockPos(), this.getBlockState(), (CampfireBlockEntity) this); // KioCG - 优化未燃烧的运算
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 698a0ac71cf9fb409d609a81cc2958121260a46d..7819c8263cef7c704982991ef22f61dc378f4d8e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -673,7 +673,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Nullable
     private static Container getSourceContainer(Level world, Hopper hopper) {
-        return HopperBlockEntity.getContainerAt(world, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+        return HopperBlockEntity.getContainerAt(world, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ(), hopper); // KioCG
     }
 
     public static List<ItemEntity> getItemsAtAndAbove(Level world, Hopper hopper) {
@@ -691,9 +691,11 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         return HopperBlockEntity.getContainerAt(world, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, true); // Paper
     }
 
+    public static Container getContainerAt(Level world, double x, double y, double z, Hopper hopper) { return getContainerAt(world, x, y, z, false, hopper instanceof HopperBlockEntity); } // KioCG
     public static Container getContainerAt(Level world, double x, double y, double z) { return getContainerAt(world, x, y, z, false); } // Paper - overload to default false
+    @Nullable private static Container getContainerAt(Level world, double x, double y, double z, boolean optimizeEntities) { return getContainerAt(world, x, y, z, optimizeEntities, false); } // KioCG
     @Nullable
-    private static Container getContainerAt(Level world, double x, double y, double z, boolean optimizeEntities) {
+    private static Container getContainerAt(Level world, double x, double y, double z, boolean optimizeEntities, boolean optimizeHopper) { // KioCG
         Object object = null;
         BlockPos blockposition = new BlockPos(x, y, z);
         if ( !world.spigotConfig.hopperCanLoadChunks && !world.hasChunkAt( blockposition ) ) return null; // Spigot
@@ -713,12 +715,15 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             }
         }
 
-        if (object == null && (!optimizeEntities || !world.paperConfig().hopper.ignoreOccludingBlocks || !org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(block).isOccluding())) { // Paper
+        else { // KioCG
+            boolean ignoreOccludingBlocks = world.paperConfig().hopper.ignoreOccludingBlocks && iblockdata.isCollisionShapeFullBlock(world, blockposition); // KioCG
+            if (!optimizeEntities || !ignoreOccludingBlocks) { // Paper // KioCG
             List<Entity> list = world.getEntities((Entity) null, new AABB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR);
 
             if (!list.isEmpty()) {
                 object = (Container) list.get(world.random.nextInt(list.size()));
             }
+            } if (object == null && optimizeHopper && (ignoreOccludingBlocks || block instanceof net.minecraft.world.level.block.BaseRailBlock)) return new net.minecraft.world.level.block.ComposterBlock.EmptyContainer(world, blockposition); // KioCG - 优化漏斗
         }
 
         return (Container) object;
